/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 06 20:12:49 GMT 2017
 */

package org.araguacaima.commons.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.araguacaima.commons.utils.DataTypesConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataTypesConverter_ESTest extends DataTypesConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("");
      boolean boolean0 = dataTypesConverter_DataTypeView0.isListOrMap();
      assertFalse(boolean0);
      assertEquals("complex", dataTypesConverter_DataTypeView0.getDataType());
      assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
      assertEquals("", dataTypesConverter_DataTypeView0.getTransformedDataType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      // Undeclared exception!
      try { 
        dataTypesConverter0.getDataTypeView("List<List<Map<complex");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.new DataTypeView("", "wxKCT{=RNo", (String) null, true);
      assertEquals("", dataTypesConverter_DataTypeView0.getDataType());
      assertEquals("wxKCT{=RNo", dataTypesConverter_DataTypeView0.getFormat());
      assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("List<Map<MimeType");
      String string0 = dataTypesConverter_DataTypeView0.extractDataTypeFromListOrMap();
      assertEquals("Map<MimeTyp", dataTypesConverter_DataTypeView0.getTransformedDataType());
      assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("");
      String string0 = dataTypesConverter_DataTypeView0.extractDataTypeFromListOrMap();
      assertEquals("complex", dataTypesConverter_DataTypeView0.getDataType());
      assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
      assertNull(string0);
      assertEquals("", dataTypesConverter_DataTypeView0.getTransformedDataType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("period");
      assertEquals("Period", dataTypesConverter_DataTypeView0.getTransformedDataType());
      assertEquals("period", dataTypesConverter_DataTypeView0.getDataType());
      assertFalse(dataTypesConverter_DataTypeView0.isComplexDataType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("Time-Only");
      assertFalse(dataTypesConverter_DataTypeView0.isComplexDataType());
      assertEquals("DateTime", dataTypesConverter_DataTypeView0.getTransformedDataType());
      assertEquals("datetime", dataTypesConverter_DataTypeView0.getDataType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("date-only");
      assertEquals("DateTime", dataTypesConverter_DataTypeView0.getTransformedDataType());
      assertEquals("datetime", dataTypesConverter_DataTypeView0.getDataType());
      assertFalse(dataTypesConverter_DataTypeView0.isComplexDataType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("date-time");
      assertEquals("DateTime", dataTypesConverter_DataTypeView0.getTransformedDataType());
      assertEquals("datetime", dataTypesConverter_DataTypeView0.getDataType());
      assertFalse(dataTypesConverter_DataTypeView0.isComplexDataType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("datetime");
      assertEquals("DateTime", dataTypesConverter_DataTypeView0.getTransformedDataType());
      assertFalse(dataTypesConverter_DataTypeView0.isComplexDataType());
      assertEquals("datetime", dataTypesConverter_DataTypeView0.getDataType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("date");
      assertEquals("Date", dataTypesConverter_DataTypeView0.getTransformedDataType());
      assertFalse(dataTypesConverter_DataTypeView0.isComplexDataType());
      assertEquals("date", dataTypesConverter_DataTypeView0.getDataType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("Map<complex");
      String string0 = dataTypesConverter_DataTypeView0.extractDataTypeFromListOrMap();
      assertEquals("comple", dataTypesConverter_DataTypeView0.getTransformedDataType());
      assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      // Undeclared exception!
      try { 
        dataTypesConverter0.getDataTypeView("List<");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.araguacaima.commons.utils.DataTypesConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView((String) null);
      assertNull(dataTypesConverter_DataTypeView0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("_CJN");
      dataTypesConverter_DataTypeView0.setComplexDataType(true);
      assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
      assertEquals("complex", dataTypesConverter_DataTypeView0.getDataType());
      assertEquals("_CJN", dataTypesConverter_DataTypeView0.getTransformedDataType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("");
      String string0 = dataTypesConverter_DataTypeView0.getFormat();
      assertNull(string0);
      assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
      assertEquals("", dataTypesConverter_DataTypeView0.getTransformedDataType());
      assertEquals("complex", dataTypesConverter_DataTypeView0.getDataType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("_CJN");
      dataTypesConverter_DataTypeView0.setFormat("_CJN");
      assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
      assertEquals("complex", dataTypesConverter_DataTypeView0.getDataType());
      assertEquals("_CJN", dataTypesConverter_DataTypeView0.getTransformedDataType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("_CJN");
      String string0 = dataTypesConverter_DataTypeView0.getTransformedDataType();
      assertEquals("_CJN", string0);
      assertNotNull(string0);
      assertEquals("complex", dataTypesConverter_DataTypeView0.getDataType());
      assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("");
      boolean boolean0 = dataTypesConverter_DataTypeView0.isComplexDataType();
      assertTrue(boolean0);
      assertEquals("", dataTypesConverter_DataTypeView0.getTransformedDataType());
      assertEquals("complex", dataTypesConverter_DataTypeView0.getDataType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("");
      assertEquals("complex", dataTypesConverter_DataTypeView0.getDataType());
      
      dataTypesConverter_DataTypeView0.setDataType("BKhclSl6??)pS/");
      assertEquals("", dataTypesConverter_DataTypeView0.getTransformedDataType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("");
      String string0 = dataTypesConverter_DataTypeView0.getDataType();
      assertEquals("", dataTypesConverter_DataTypeView0.getTransformedDataType());
      assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
      assertNotNull(string0);
      assertEquals("complex", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
      DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("");
      assertNotNull(dataTypesConverter_DataTypeView0);
      assertEquals("", dataTypesConverter_DataTypeView0.getTransformedDataType());
      
      dataTypesConverter_DataTypeView0.setTransformedDataType("nIir");
      assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
  }

}
