/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 06 19:21:30 GMT 2017
 */

package org.araguacaima.commons.utils;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Serializable;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import org.araguacaima.commons.utils.DataTypesConverter;
import org.araguacaima.commons.utils.HttpUtils;
import org.araguacaima.commons.utils.ReflectionUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectionUtils_ESTest extends ReflectionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);

      String string0 = reflectionUtils0.mergeObjects("%C", "ge");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      String string0 = reflectionUtils0.getExtractedGenerics(", Maybe it's an ");
      assertNotNull(string0);
      assertEquals(", Maybe it's an", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      reflectionUtils0.addEnum(class0, "ANNOTATION", (String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      boolean boolean0 = reflectionUtils0.isList((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      reflectionUtils0.deepInitialization((Object) linkedHashSet0, true);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      reflectionUtils0.deepInitialization(object0, (Set<String>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      reflectionUtils0.deepInitialization((Object) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Object) class0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Class class1 = (Class)reflectionUtils0.getValueFromCollectionImplementation(arrayList0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals(16393, class1.getModifiers());
      assertEquals("class org.araguacaima.commons.utils.HttpUtils$METHOD_TYPE", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<Integer> class0 = Integer.class;
      Field field0 = reflectionUtils0.getFieldInclusiveOnParents(class0, ", Maybe it's an ");
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      String string0 = reflectionUtils0.getExtractedGenerics("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<Annotation> class0 = Annotation.class;
      Class class1 = reflectionUtils0.extractTypedGenericsParameter(class0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertEquals("interface java.lang.annotation.Annotation", class1.toString());
      assertTrue(class1.isInterface());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class class1 = reflectionUtils0.extractTypedGenericsParameter(class0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      Class class1 = reflectionUtils0.extractGenerics(class0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(16393, class1.getModifiers());
      assertEquals("class org.araguacaima.commons.utils.HttpUtils$METHOD_TYPE", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = reflectionUtils0.deepClone(object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reflectionUtils0.recursivelyGetAllSuperClasses(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.mergeObjects((Object) null, (Object) null, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Integer integer0 = Integer.valueOf((-996));
      assertNotNull(integer0);
      assertEquals((-996), (int)integer0);
      
      try { 
        reflectionUtils0.mergeObjects((Integer) null, integer0, false, true);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
         //
         // java.lang.Integer
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Class class1 = reflectionUtils0.extractTypedGenericsParameter(class0);
      assertEquals("class org.araguacaima.commons.utils.HttpUtils$METHOD_TYPE", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertEquals(16393, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertNotNull(class1);
      
      try { 
        reflectionUtils0.mergeObjects((Object) arrayList0, (Object) class1, true, false);
        fail("Expecting exception: IllegalAccessException");
      
      } catch(IllegalAccessException e) {
         //
         // Can not call newInstance() on the Class for java.lang.Class
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.mergeObjects((Annotation) null, (Annotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      try { 
        reflectionUtils0.mergeObjects((Object) "", (Object) class0);
        fail("Expecting exception: IllegalAccessException");
      
      } catch(IllegalAccessException e) {
         //
         // Can not call newInstance() on the Class for java.lang.Class
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.getSimpleJavaTypeOrNull("&", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      Class class1 = reflectionUtils0.extractTypedGenericsParameter(class0);
      assertEquals("class org.araguacaima.commons.utils.HttpUtils$METHOD_TYPE", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(16393, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.getFieldInclusiveOnParents(class1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Either name or type of the field must be specified
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.getExtractedGenerics((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.getAllFieldsIncludingParents((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.getAllFieldsIncludingParents((Class) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.extractGenericsKeyValue((Field) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.createObject((Class) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.createObject((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<Integer> class0 = Integer.class;
      try { 
        reflectionUtils0.createCollectionObject(class0);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
         //
         // java.lang.Integer
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      try { 
        reflectionUtils0.createAndInitializeTypedCollection(class0);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
         //
         // org.araguacaima.commons.utils.HttpUtils$METHOD_TYPE
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        reflectionUtils0.createAndInitializeCollection(class0, ">", (Object) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // org/apache/commons/beanutils/PropertyUtils
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.changeAnnotationValue((Annotation) null, "_amper_", arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Proxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.addEnum((Class<HttpUtils.METHOD_TYPE>) null, "gx;_uT<@5$^'^8Gm", "", "gx;_uT<@5$^'^8Gm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Serializable serializable0 = ReflectionUtils.PrimitiveDefaults.getDefaultValue(class0);
      assertNotNull(serializable0);
      assertEquals(0, serializable0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer((-2692));
      assertNotNull(integer0);
      assertEquals((-2692), (int)integer0);
      
      Collection<Field> collection0 = reflectionUtils0.getAllFieldsIncludingParents(class0, (Integer) null, integer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = reflectionUtils0.isMapImplementation(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.getFullyQualifiedJavaTypeOrNull("W8Hvyp-MQ=>i", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      reflectionUtils0.deepInitialization(object0, (Set<String>) hashSet0, true, true);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.deepInitialization((Object) "memberValues", (Set<String>) linkedHashSet0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.deepInitialization((Object) null, (Set<String>) hashSet0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      try { 
        reflectionUtils0.createObject(class0, true);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
         //
         // Unable to find a no-arg constructor for class: org.araguacaima.commons.utils.HttpUtils$METHOD_TYPE
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<String> class0 = String.class;
      Object object0 = reflectionUtils0.createObject(class0, false);
      assertNotNull(object0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<Field> class0 = Field.class;
      try { 
        reflectionUtils0.createAndInitializeTypedCollection((Class<?>) class0, (Object) null);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
         //
         // java.lang.reflect.Field
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<String> class0 = String.class;
      boolean boolean0 = reflectionUtils0.isCollectionImplementation(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class class0 = reflectionUtils0.extractGenerics((Class) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      Collection<Field> collection0 = reflectionUtils0.getAllFieldsIncludingParents(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reflectionUtils0.getFullyQualifiedJavaTypeOrNull(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Collection<Field> collection0 = reflectionUtils0.getAllFieldsIncludingParents((Object) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reflectionUtils0.getSimpleJavaTypeOrNull(class0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Serializable serializable0 = ReflectionUtils.PrimitiveDefaults.getDefaultValue(class0);
      assertNull(serializable0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<String> class0 = String.class;
      Serializable serializable0 = ReflectionUtils.PrimitiveDefaults.getDefaultValue(class0);
      assertNotNull(serializable0);
      assertEquals("", serializable0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        ReflectionUtils.PrimitiveDefaults.getDefaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class type class java.lang.reflect.Field not supported
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils$PrimitiveDefaults", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Serializable serializable0 = ReflectionUtils.PrimitiveDefaults.getDefaultValue(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(serializable0);
      assertEquals(0, serializable0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      LinkedHashMap<String, Integer> linkedHashMap0 = new LinkedHashMap<String, Integer>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)reflectionUtils0.mergeObjects((Object) linkedHashMap0, (Object) linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertNotNull(linkedHashMap1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      LinkedList<Class> linkedList0 = (LinkedList<Class>)reflectionUtils0.recursivelyGetAllSuperClasses((Class) null);
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      Collection<Field> collection0 = reflectionUtils0.getAllFieldsIncludingParents(class0, (Integer) null, (Integer) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Collection<Field> collection0 = reflectionUtils0.getAllFieldsIncludingParents(class0, integer0, integer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      boolean boolean0 = reflectionUtils0.isMapImplementation((Class) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Object object0 = reflectionUtils0.mergeObjects((Object) "gx;_uT<@5$^'^8Gm", (Object) "gx;_uT<@5$^'^8Gm", false, false);
      assertNotNull(object0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      String string0 = reflectionUtils0.mergeObjects("#M", "#M", true, true);
      assertNotNull(string0);
      assertEquals("#M", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      boolean boolean0 = reflectionUtils0.isList("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      boolean boolean0 = reflectionUtils0.isList("Collection<");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Object object0 = reflectionUtils0.getValueFromCollectionImplementation((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.getValueFromCollectionImplementation(arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      String string0 = reflectionUtils0.getFullyQualifiedJavaTypeOrNull((String) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class class0 = reflectionUtils0.extractTypedGenericsParameter((Class) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      Class class1 = reflectionUtils0.extractTypedGenericsParameter(class0);
      assertEquals("class org.araguacaima.commons.utils.HttpUtils$METHOD_TYPE", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertEquals(16393, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.getValueFromCollectionImplementation(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Type. Incoming type must be a collection implementation
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.extractGenerics((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add("");
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.deepInitialization((Object) "gx;_uT<@5$^'^8Gm", (Set<String>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<Integer> class0 = Integer.class;
      try { 
        reflectionUtils0.createObject(class0, false);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
         //
         // Unable to find a no-arg constructor for class: java.lang.Integer
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      try { 
        reflectionUtils0.createObject(class0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
         //
         // Unable to find a no-arg constructor for class: org.araguacaima.commons.utils.HttpUtils$METHOD_TYPE
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reflectionUtils0.createCollectionObject(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Type. Incoming type must be a collection implementation
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      Collection<Object> collection0 = reflectionUtils0.createAndInitializeTypedCollection((Class<?>) class0, (Object) class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      boolean boolean0 = reflectionUtils0.isCollectionImplementation("org.araguacaima.commons.utils.ReflectionUtils$3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      boolean boolean0 = reflectionUtils0.isCollectionImplementation((Class) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.createCollectionObject((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      assertNotNull(reflectionUtils0);
      
      // Undeclared exception!
      try { 
        reflectionUtils0.getSimpleJavaTypeOrNull("_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        reflectionUtils0.deepInitialization((Object) arrayList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      Class<String> class0 = String.class;
      Field field0 = reflectionUtils0.getFieldInclusiveOnParents(class0, "serialPersistentFields");
      // Undeclared exception!
      try { 
        reflectionUtils0.extractGenerics(field0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      Class<String> class0 = String.class;
      Collection<Object> collection0 = reflectionUtils0.createAndInitializeTypedCollection(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      Class<Object> class0 = Object.class;
      Object object0 = reflectionUtils0.createObject(class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      // Undeclared exception!
      try { 
        reflectionUtils0.deepInitialization((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      Class<Object> class1 = Object.class;
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      try { 
        reflectionUtils0.createAndInitializeTypedCollection((Class<?>) class0, "[Assertion failed] - this map must not be empty; it must contain at least one entry", (Object) class1);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
         //
         // org.araguacaima.commons.utils.HttpUtils$METHOD_TYPE
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      Integer integer0 = new Integer(1904);
      try { 
        reflectionUtils0.mergeObjects(integer0, integer0);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
         //
         // java.lang.Integer
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
      // Undeclared exception!
      try { 
        reflectionUtils0.getSimpleJavaTypeOrNull(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      boolean boolean0 = reflectionUtils0.isCollectionImplementation("memberValues");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      Class<Integer> class0 = Integer.class;
      try { 
        reflectionUtils0.createAndInitializeCollection((Class<?>) class0, "-HPq!", (Object) null);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
         //
         // java.lang.Integer
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      Class<Annotation> class0 = Annotation.class;
      Class class1 = reflectionUtils0.extractGenerics(class0);
      Class class2 = (Class)reflectionUtils0.deepClone(class1);
      assertTrue(class2.isInterface());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      Class<Annotation> class0 = Annotation.class;
      ArrayList<HttpUtils.METHOD_TYPE> arrayList0 = new ArrayList<HttpUtils.METHOD_TYPE>();
      // Undeclared exception!
      try { 
        reflectionUtils0.createAndInitializeCollection((Class<?>) class0, (Object) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Type. Incoming type must be a collection implementation
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
      Class<Field> class0 = Field.class;
      Class class1 = reflectionUtils0.extractGenerics(class0);
      // Undeclared exception!
      try { 
        reflectionUtils0.getFullyQualifiedJavaTypeOrNull((Object) class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      ReflectionUtils.PrimitiveDefaults reflectionUtils_PrimitiveDefaults0 = new ReflectionUtils.PrimitiveDefaults();
  }
}
