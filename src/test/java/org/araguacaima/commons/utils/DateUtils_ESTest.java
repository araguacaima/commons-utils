/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 06 20:09:03 GMT 2017
 */

package org.araguacaima.commons.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.araguacaima.commons.utils.DateUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateUtils_ESTest extends DateUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      dateUtils0.completeDate("~IWpCr}`g]@SA '", "~IWpCr}`g]@SA '");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      dateUtils0.init();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      dateUtils0.validateFormat((String) null, "14/02/2014");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)dateUtils0.sdft;
      dateUtils0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
      dateUtils0.getDateByString(" 23:59:59");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      dateUtils0.completeDateLast((String) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.completeDateLast("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.completeDateFirst("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      dateUtils0.sdf = null;
      // Undeclared exception!
      try { 
        dateUtils0.getDateByString("4!*uY!bNK#M{ll=", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      // Undeclared exception!
      try { 
        dateUtils0.format((Date) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.completeDate("Rtsa^C<_1}", "Rtsa^C<_1}");
      assertEquals("Rtsa^C<_1}Rtsa^C<_1}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.completeDate((String) null, "20:21:21");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      boolean boolean0 = dateUtils0.validateFormat(":", ":");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.todayFullString();
      assertEquals("Lunes 01 de Enero de 1970", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.now();
      assertEquals("0:00:00", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.now();
      assertEquals("20:21:21", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      boolean boolean0 = dateUtils0.isEmpty("DD-MM-AAAA HH:MM:SS");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      boolean boolean0 = dateUtils0.isEmpty("DD-MM-AAAA");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      java.sql.Date date0 = dateUtils0.getSqlDate((Date) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      Date date0 = dateUtils0.getDateWithZeroHour((Date) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      Date date0 = dateUtils0.getDateByString("Iy)5S)j*jSBum+fu_d\"", true);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      Date date0 = dateUtils0.getDateByString((String) null, false);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.formatDateTime((Date) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.formatDate((Date) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.completeDate("", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.completeDateFirst((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      Date date0 = dateUtils0.getDateByString(" 23:59:59");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      // Undeclared exception!
      try { 
        dateUtils0.daysBetween((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.utils.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.today();
      assertEquals("14/02/2014", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.completeDateLast("date.short");
      assertNotNull(string0);
      assertEquals("date.short 23:59:59", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String string0 = dateUtils0.completeDateFirst("{Cp5~dhsyH");
      assertNotNull(string0);
      assertEquals("{Cp5~dhsyH 00:00:00", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      String[] stringArray0 = new String[4];
      dateUtils0.main(stringArray0);
      assertEquals(19, DateUtils.LONG_DATE_LENGTH);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
      // Undeclared exception!
      try { 
        dateUtils0.format((Date) null, "{Cp5~dhsyH 00:00:00");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'C'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
}
