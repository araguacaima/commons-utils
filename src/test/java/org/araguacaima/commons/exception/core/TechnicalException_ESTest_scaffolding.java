/**
 * Scaffolding file used to store all the setups needed to run
 * tests automatically generated by EvoSuite
 * Tue Sep 05 19:24:46 GMT 2017
 */

package org.araguacaima.commons.exception.core;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

import static org.evosuite.shaded.org.mockito.Mockito.mock;

@EvoSuiteClassExclude
public class TechnicalException_ESTest_scaffolding {

    private static final java.util.Properties defaultProperties = (java.util.Properties) System.getProperties().clone();
    @org.junit.Rule
    public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet
            .NonFunctionalRequirementRule();
    private org.evosuite.runtime.thread.ThreadStopper threadStopper = new org.evosuite.runtime.thread.ThreadStopper
            (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(),
            3000);

    @AfterClass
    public static void clearEvoSuiteFramework() {
        Sandbox.resetDefaultSecurityManager();
        System.setProperties((java.util.Properties) defaultProperties.clone());
    }

    @BeforeClass
    public static void initEvoSuiteFramework() {
        org.evosuite.runtime.RuntimeSettings.className = "org.araguacaima.commons.exception.core.TechnicalException";
        org.evosuite.runtime.GuiSupport.initialize();
        org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100;
        org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000;
        org.evosuite.runtime.RuntimeSettings.mockSystemIn = true;
        org.evosuite.runtime.RuntimeSettings.sandboxMode = SandboxMode.RECOMMENDED;
        Sandbox.initializeSecurityManagerForSUT();
        org.evosuite.runtime.classhandling.JDKClassResetter.init();
        setSystemProperties();
        initializeClasses();
        org.evosuite.runtime.Runtime.getInstance().resetRuntime();
        try {
            initMocksToAvoidTimeoutsInTheTests();
        } catch (ClassNotFoundException e) {
        }
    }

    public static void setSystemProperties() {

        System.setProperties((java.util.Properties) defaultProperties.clone());
        System.setProperty("file.encoding", "Cp1252");
        System.setProperty("java.awt.headless", "true");
        System.setProperty("user.country", "MX");
        System.setProperty("user.language", "es");
        System.setProperty("user.timezone", "America/Mexico_City");
    }

    private static void initializeClasses() {
        org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TechnicalException_ESTest_scaffolding
                        .class.getClassLoader(),
                "org.araguacaima.commons.exception.core.GeneralException",
                "org.araguacaima.commons.exception.core.Severity$1",
                "org.araguacaima.commons.exception.core.Severity",
                "org.araguacaima.commons.exception.core.Exceptions",
                "org.araguacaima.commons.utils.SystemInfo",
                "org.araguacaima.commons.exception.MessageHandler",
                "org.araguacaima.commons.exception.core.TechnicalException");
    }

    private static void initMocksToAvoidTimeoutsInTheTests()
            throws ClassNotFoundException {
        mock(Class.forName("java.io.PrintStream", false, TechnicalException_ESTest_scaffolding.class.getClassLoader()));
        mock(Class.forName("java.io.PrintWriter", false, TechnicalException_ESTest_scaffolding.class.getClassLoader()));
    }

    @After
    public void doneWithTestCase() {
        threadStopper.killAndJoinClientThreads();
        org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();
        org.evosuite.runtime.classhandling.JDKClassResetter.reset();
        resetClasses();
        Sandbox.doneWithExecutingSUTCode();
        org.evosuite.runtime.agent.InstrumentingAgent.deactivate();
        org.evosuite.runtime.GuiSupport.restoreHeadlessMode();
    }

    private static void resetClasses() {
        org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(
                TechnicalException_ESTest_scaffolding.class.getClassLoader());

        org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
                "org.araguacaima.commons.exception.core.GeneralException",
                "org.araguacaima.commons.exception.core.TechnicalException",
                "org.araguacaima.commons.exception.core.Severity",
                "org.araguacaima.commons.exception.core.Exceptions",
                "org.araguacaima.commons.exception.MessageHandler",
                "org.araguacaima.commons.utils.SystemInfo");
    }

    @Before
    public void initTestCase() {
        threadStopper.storeCurrentThreads();
        threadStopper.startRecordingTime();
        org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();
        Sandbox.goingToExecuteSUTCode();
        setSystemProperties();
        org.evosuite.runtime.GuiSupport.setHeadless();
        org.evosuite.runtime.Runtime.getInstance().resetRuntime();
        org.evosuite.runtime.agent.InstrumentingAgent.activate();
    }
}
