/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 06 20:17:52 GMT 2017
 */

package org.araguacaima.commons.exception.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Date;
import org.araguacaima.commons.exception.core.ApplicationGeneralExceptionImpl;
import org.araguacaima.commons.exception.core.EnvironmentThrowableInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ApplicationGeneralExceptionImpl_ESTest extends ApplicationGeneralExceptionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ApplicationGeneralExceptionImpl applicationGeneralExceptionImpl0 = new ApplicationGeneralExceptionImpl("y");
      applicationGeneralExceptionImpl0.fillInStackTrace();
      Throwable throwable0 = applicationGeneralExceptionImpl0.initCause((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ApplicationGeneralExceptionImpl applicationGeneralExceptionImpl0 = new ApplicationGeneralExceptionImpl("");
      PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      doReturn((PrintStream) null, (PrintStream) null, (PrintStream) null, (PrintStream) null, (PrintStream) null).when(printStream0).append(any(java.lang.CharSequence.class));
      PrintStream printStream1 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      doReturn((PrintStream) null, (PrintStream) null, (PrintStream) null, (PrintStream) null, (PrintStream) null).when(printStream1).append(any(java.lang.CharSequence.class));
      MockThrowable.replacement_printStackTrace((Throwable) applicationGeneralExceptionImpl0, printStream1);
      EnvironmentThrowableInfo environmentThrowableInfo0 = applicationGeneralExceptionImpl0.environmentThrowableInfo;
      applicationGeneralExceptionImpl0.environmentThrowableInfo = environmentThrowableInfo0;
      MockThrowable.replacement_printStackTrace((Throwable) applicationGeneralExceptionImpl0, printStream0);
      PrintStream printStream2 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      doReturn((PrintStream) null, (PrintStream) null, (PrintStream) null, (PrintStream) null, (PrintStream) null).when(printStream2).append(any(java.lang.CharSequence.class));
      MockThrowable.replacement_printStackTrace((Throwable) applicationGeneralExceptionImpl0, printStream2);
      Throwable throwable0 = applicationGeneralExceptionImpl0.getCause();
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ApplicationGeneralExceptionImpl applicationGeneralExceptionImpl0 = new ApplicationGeneralExceptionImpl(";G");
      PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      doReturn((PrintStream) null, (PrintStream) null, (PrintStream) null, (PrintStream) null, (PrintStream) null).when(printStream0).append(any(java.lang.CharSequence.class));
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null).when(printWriter0).append(any(java.lang.CharSequence.class));
      MockThrowable.replacement_printStackTrace((Throwable) applicationGeneralExceptionImpl0, printWriter0);
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null).when(printWriter1).append(any(java.lang.CharSequence.class));
      MockThrowable.replacement_printStackTrace((Throwable) applicationGeneralExceptionImpl0, printWriter1);
      MockThrowable.replacement_printStackTrace((Throwable) applicationGeneralExceptionImpl0, printStream0);
      applicationGeneralExceptionImpl0.getOccurrenceDateAndTime();
      applicationGeneralExceptionImpl0.occurenceDateAndTime = null;
      PrintStream printStream1 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      applicationGeneralExceptionImpl0.printStackTrace(printStream1);
      applicationGeneralExceptionImpl0.getMessage();
      applicationGeneralExceptionImpl0.getLocalizedMessage();
      applicationGeneralExceptionImpl0.printStackTrace();
      applicationGeneralExceptionImpl0.setStackTrace(stackTraceElementArray0);
      applicationGeneralExceptionImpl0.toString();
      PrintStream printStream2 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      applicationGeneralExceptionImpl0.printStackTrace(printStream2);
      applicationGeneralExceptionImpl0.getStackTrace();
      applicationGeneralExceptionImpl0.getMessage();
      applicationGeneralExceptionImpl0.getStackTrace();
      applicationGeneralExceptionImpl0.getCause();
      applicationGeneralExceptionImpl0.setStackTrace(stackTraceElementArray0);
      applicationGeneralExceptionImpl0.getLocalizedMessage();
      applicationGeneralExceptionImpl0.getStackTrace();
      applicationGeneralExceptionImpl0.getMessage();
      applicationGeneralExceptionImpl0.initCause((Throwable) null);
      PrintStream printStream3 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      applicationGeneralExceptionImpl0.printStackTrace(printStream3);
      PrintWriter printWriter2 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      applicationGeneralExceptionImpl0.printStackTrace(printWriter2);
      PrintWriter printWriter3 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      applicationGeneralExceptionImpl0.printStackTrace(printWriter3);
      assertNull(applicationGeneralExceptionImpl0.getLocalizedMessage());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ApplicationGeneralExceptionImpl applicationGeneralExceptionImpl0 = new ApplicationGeneralExceptionImpl("");
      ApplicationGeneralExceptionImpl applicationGeneralExceptionImpl1 = new ApplicationGeneralExceptionImpl("", applicationGeneralExceptionImpl0);
      String string0 = applicationGeneralExceptionImpl1.getLocalizedMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ApplicationGeneralExceptionImpl applicationGeneralExceptionImpl0 = new ApplicationGeneralExceptionImpl((String) null);
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null).when(printWriter0).append(any(java.lang.CharSequence.class));
      MockThrowable.replacement_printStackTrace((Throwable) applicationGeneralExceptionImpl0, printWriter0);
      ApplicationGeneralExceptionImpl applicationGeneralExceptionImpl1 = new ApplicationGeneralExceptionImpl((String) null, applicationGeneralExceptionImpl0);
      ApplicationGeneralExceptionImpl applicationGeneralExceptionImpl2 = new ApplicationGeneralExceptionImpl("<;^Rt[BOQ/Fnlg+;");
      applicationGeneralExceptionImpl1.getSuppressed();
      MockThrowable.getDefaultStackTrace();
      Date date0 = applicationGeneralExceptionImpl0.occurenceDateAndTime;
      applicationGeneralExceptionImpl1.occurenceDateAndTime = null;
      Date date1 = applicationGeneralExceptionImpl2.occurenceDateAndTime;
      applicationGeneralExceptionImpl1.occurenceDateAndTime = null;
      applicationGeneralExceptionImpl1.getLocalizedMessage();
      String string0 = applicationGeneralExceptionImpl1.getLocalizedMessage();
      assertNull(string0);
  }
}
