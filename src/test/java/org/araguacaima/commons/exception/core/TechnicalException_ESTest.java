/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 05 19:24:45 GMT 2017
 */

package org.araguacaima.commons.exception.core;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.PrintStream;
import java.io.PrintWriter;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.runtime.MockitoExtension.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.any;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS = true,
                     useVNET = true,
                     resetStaticState = true,
                     separateClassLoader = true,
                     useJEE = true)
public class TechnicalException_ESTest extends TechnicalException_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException("", (Throwable) null, "r.?s&:-PnOlWLlR)r9");
        assertNotNull(technicalException0);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("r.?s&:-PnOlWLlR)r9", technicalException0.getExtendedMessage());

        StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
        StackTraceElement stackTraceElement0 = new StackTraceElement("", "r.?s&:-PnOlWLlR)r9", "gW1IOH7c1!`d", 3332);
        assertNotNull(stackTraceElement0);
        assertEquals(3332, stackTraceElement0.getLineNumber());
        assertEquals(".r.?s&:-PnOlWLlR)r9(gW1IOH7c1!`d:3332)", stackTraceElement0.toString());
        assertEquals("", stackTraceElement0.getClassName());
        assertEquals("r.?s&:-PnOlWLlR)r9", stackTraceElement0.getMethodName());
        assertFalse(stackTraceElement0.isNativeMethod());
        assertEquals("gW1IOH7c1!`d", stackTraceElement0.getFileName());

        stackTraceElementArray0[0] = stackTraceElement0;
        technicalException0.setExtendedMessage("gW1IOH7c1!`d");
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("gW1IOH7c1!`d", technicalException0.getExtendedMessage());

        technicalException0.setStackTrace(stackTraceElementArray0);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("gW1IOH7c1!`d", technicalException0.getExtendedMessage());

        Throwable throwable0 = technicalException0.initCause((Throwable) null);
        assertNotNull(throwable0);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("gW1IOH7c1!`d", technicalException0.getExtendedMessage());
        assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: [[]] r.?s&:-PnOlWLlR)r9",
                throwable0.toString());
        assertEquals("[[]] r.?s&:-PnOlWLlR)r9", throwable0.getMessage());

        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException0.printStackTrace(printStream0);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("gW1IOH7c1!`d", technicalException0.getExtendedMessage());

        TechnicalException technicalException1 = new TechnicalException("", technicalException0, "");
        assertNotNull(technicalException1);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("gW1IOH7c1!`d", technicalException0.getExtendedMessage());
        assertEquals("", technicalException1.getExtendedMessage());
        assertEquals("", technicalException1.getKeyCode());
        assertFalse(technicalException1.equals((Object) technicalException0));

        Throwable throwable1 = technicalException0.getCause();
        assertNull(throwable1);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("gW1IOH7c1!`d", technicalException0.getExtendedMessage());
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertNotSame(technicalException0, technicalException1);

        Throwable throwable2 = technicalException0.getOriginalException();
        assertNull(throwable2);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("gW1IOH7c1!`d", technicalException0.getExtendedMessage());
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertNotSame(technicalException0, technicalException1);

        technicalException1.perform();
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("gW1IOH7c1!`d", technicalException0.getExtendedMessage());
        assertEquals("", technicalException1.getExtendedMessage());
        assertEquals("", technicalException1.getKeyCode());
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException1, technicalException0);

        technicalException1.perform();
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("gW1IOH7c1!`d", technicalException0.getExtendedMessage());
        assertEquals("", technicalException1.getExtendedMessage());
        assertEquals("", technicalException1.getKeyCode());
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException1, technicalException0);

        technicalException1.printStackTrace();
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("gW1IOH7c1!`d", technicalException0.getExtendedMessage());
        assertEquals("", technicalException1.getExtendedMessage());
        assertEquals("", technicalException1.getKeyCode());
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException1, technicalException0);

        PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn((PrintWriter) null, (PrintWriter) null).when(printWriter0).append(any(CharSequence.class));
        technicalException0.printStackTrace(printWriter0);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("gW1IOH7c1!`d", technicalException0.getExtendedMessage());
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertNotSame(technicalException0, technicalException1);
    }

    @Test(timeout = 4000)
    public void test01()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException((String) null, (Throwable) null, (String) null);
        assertNotNull(technicalException0);
        assertNull(technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());

        technicalException0.printStackTrace();
        assertNull(technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());

        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException0.printStackTrace(printStream0);
        assertNull(technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());

        PrintStream printStream1 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException0.printStackTrace(printStream1);
        assertNull(technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());

        Throwable throwable0 = technicalException0.getCause();
        assertNull(throwable0);
        assertNull(technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());

        Throwable throwable1 = technicalException0.initCause((Throwable) null);
        assertNotNull(throwable1);
        assertNull(technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: [[null]]", throwable1.toString());
        assertEquals("[[null]]", throwable1.getMessage());

        StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
        StackTraceElement stackTraceElement0 = new StackTraceElement("fFzq:uyQ", "", "", 2);
        assertNotNull(stackTraceElement0);
        assertEquals("fFzq:uyQ.(:2)", stackTraceElement0.toString());
        assertEquals("fFzq:uyQ", stackTraceElement0.getClassName());
        assertEquals("", stackTraceElement0.getMethodName());
        assertFalse(stackTraceElement0.isNativeMethod());
        assertEquals("", stackTraceElement0.getFileName());
        assertEquals(2, stackTraceElement0.getLineNumber());

        stackTraceElementArray0[0] = stackTraceElement0;
        StackTraceElement stackTraceElement1 = null;
        try {
            stackTraceElement1 = new StackTraceElement((String) null, "", (String) null, 2);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // Declaring class is null
            //
            verifyException("java.util.Objects", e);
        }
    }

    @Test(timeout = 4000)
    public void test02()
            throws Throwable {
        TechnicalException technicalException0 = null;
        try {
            technicalException0 = new TechnicalException("", (Severity) null, (Throwable) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.araguacaima.commons.exception.core.TechnicalException", e);
        }
    }

    @Test(timeout = 4000)
    public void test03()
            throws Throwable {
        Severity severity0 = Severity.FATAL;
        assertNotNull(severity0);
        assertEquals(4, Severity.INFO_INT);
        assertEquals(3, Severity.WARNING_INT);
        assertEquals(5, Severity.DEBUG_INT);
        assertEquals(1, Severity.FATAL_INT);
        assertEquals(2, Severity.ERROR_INT);
        assertEquals("FATAL", severity0.getName());
        assertEquals("FATAL", severity0.toString());
        assertEquals(1, severity0.getIntLevel());

        TechnicalException technicalException0 = null;
        try {
            technicalException0 = new TechnicalException("org.araguacaima.commons.exception.core.Severity",
                    severity0,
                    (Throwable) null,
                    "org.araguacaima.commons.exception.core.Severity");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.araguacaima.commons.exception.core.TechnicalException", e);
        }
    }

    @Test(timeout = 4000)
    public void test04()
            throws Throwable {
        TechnicalException technicalException0 = null;
        try {
            technicalException0 = new TechnicalException("U", (Throwable) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.araguacaima.commons.exception.core.TechnicalException", e);
        }
    }

    @Test(timeout = 4000)
    public void test05()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException("");
        assertNotNull(technicalException0);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());

        String string0 = technicalException0.toString();
        assertNotNull(string0);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: [[]]", string0);

        // Undeclared exception!
        try {
            technicalException0.printStackTrace((PrintStream) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.Writer", e);
        }
    }

    @Test(timeout = 4000)
    public void test06()
            throws Throwable {
        Severity severity0 = Severity.INFO;
        Severity.getSeverities();
        Severity.getSeverities();
        TechnicalException technicalException0 = new TechnicalException("",
                (Throwable) null,
                "org.araguacaima.commons.exception.core.TechnicalException");
        TechnicalException technicalException1 = new TechnicalException(";7=", severity0, technicalException0);
        TechnicalException technicalException2 = new TechnicalException(";7=", technicalException1);
        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException0.printStackTrace(printStream0);
        technicalException2.perform();
        technicalException1.printStackTrace();
        technicalException1.getSuppressed();
        technicalException0.getOriginalException();
        PrintWriter printWriter0 = null;
        // Undeclared exception!
        try {
            technicalException1.printStackTrace((PrintWriter) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
        }
    }

    @Test(timeout = 4000)
    public void test07()
            throws Throwable {
        Severity severity0 = Severity.FATAL;
        TechnicalException technicalException0 = new TechnicalException((String) null);
        TechnicalException technicalException1 = new TechnicalException((String) null, severity0, technicalException0);
        TechnicalException technicalException2 = new TechnicalException("K)-VN@f", severity0, technicalException1, "");
        TechnicalException technicalException3 = new TechnicalException("K)-VN@f", technicalException2, "");
        TechnicalException technicalException4 = new TechnicalException("K)-VN@f", technicalException3);
        technicalException4.printStackTrace();
        assertFalse(technicalException0.equals((Object) technicalException4));
    }

    @Test(timeout = 4000)
    public void test08()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException("G$?lW");
        technicalException0.printStackTrace();
        Object object0 = technicalException0.magicValue;
        TechnicalException technicalException1 = new TechnicalException("G$?lW", technicalException0, "");
        technicalException0.initCause(technicalException1);
        technicalException0.magicValue = null;
        technicalException0.toString();
        technicalException0.fillInStackTrace();
        TechnicalException technicalException2 = new TechnicalException("^:%vdIK7=%t#-lu:X:", technicalException0);
        TechnicalException technicalException3 = new TechnicalException("^:%vdIK7=%t#-lu:X:",
                technicalException2,
                "$1+*BA(*K:$M1b2F2!");
        PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn((PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null).when(printWriter0).append(any(CharSequence.class));
        technicalException3.getCause();
        technicalException2.printStackTrace(printWriter0);
        technicalException0.perform();
        Severity severity0 = Severity.INFO;
        technicalException2.severity = severity0;
        Object object1 = new Object();
        technicalException2.magicValue = object1;
        technicalException3.getOriginalException();
        technicalException2.initCause(technicalException0);
        PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn((PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null).when(printWriter1).append(any(CharSequence.class));
        technicalException2.printStackTrace(printWriter1);
        technicalException2.printStackTrace();
        technicalException2.perform();
        PrintWriter printWriter2 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn((PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null).when(printWriter2).append(any(CharSequence.class));
        technicalException1.printStackTrace(printWriter2);
        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException1.printStackTrace(printStream0);
        PrintStream printStream1 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException2.printStackTrace(printStream1);
        technicalException0.perform();
        assertFalse(technicalException0.equals((Object) technicalException1));
    }

    @Test(timeout = 4000)
    public void test09()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException("i/mWbs@'=:mAdt:/VI");
        TechnicalException technicalException1 = new TechnicalException(" ", (Severity) null, technicalException0, "");
        TechnicalException technicalException2 = new TechnicalException((String) null,
                (Severity) null,
                technicalException1);
        TechnicalException technicalException3 = new TechnicalException((String) null, technicalException2);
        TechnicalException technicalException4 = new TechnicalException(" ", technicalException3, "68c^gHW#**n54S~R;");
        assertFalse(technicalException4.equals((Object) technicalException3));
    }

    @Test(timeout = 4000)
    public void test10()
            throws Throwable {
        String string0 = "dn%Z+DuJP SFW5/2g";
        Severity severity0 = Severity.WARNING;
        TechnicalException technicalException0 = new TechnicalException("");
        TechnicalException technicalException1 = new TechnicalException("dn%Z+DuJP SFW5/2g",
                severity0,
                technicalException0);
        technicalException1.initCause(technicalException0);
        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException0.printStackTrace(printStream0);
        technicalException1.fillInStackTrace();
        technicalException1.getLocalizedMessage();
        // Undeclared exception!
        try {
            technicalException1.setStackTrace((StackTraceElement[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
        }
    }
}
