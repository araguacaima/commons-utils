/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 06 20:16:30 GMT 2017
 */

package org.araguacaima.commons.exception.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Collection;
import org.araguacaima.commons.exception.core.Severity;
import org.araguacaima.commons.exception.core.TechnicalException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TechnicalException_ESTest extends TechnicalException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Severity severity0 = Severity.FATAL;
      assertEquals(4, Severity.INFO_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertNotNull(severity0);
      assertEquals("FATAL", severity0.getName());
      assertEquals(1, severity0.getIntLevel());
      assertEquals("FATAL", severity0.toString());
      
      TechnicalException technicalException0 = null;
      try {
        technicalException0 = new TechnicalException("1s", severity0, (Throwable) null, "1s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.exception.core.TechnicalException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Severity severity0 = Severity.DEBUG;
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(severity0);
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("DEBUG", severity0.getName());
      
      TechnicalException technicalException0 = new TechnicalException("");
      assertNotNull(technicalException0);
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException0.getKeyCode());
      
      TechnicalException technicalException1 = new TechnicalException("i#>", severity0, technicalException0);
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(technicalException1);
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("DEBUG", severity0.getName());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("[[]]", technicalException1.getExtendedMessage());
      assertEquals("i#>", technicalException1.getKeyCode());
      
      TechnicalException technicalException2 = new TechnicalException("NESTED", technicalException1);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException1));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(technicalException2);
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("DEBUG", severity0.getName());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("[[]]", technicalException1.getExtendedMessage());
      assertEquals("i#>", technicalException1.getKeyCode());
      assertEquals("NESTED", technicalException2.getKeyCode());
      assertEquals("[[i#>]] [[]]", technicalException2.getExtendedMessage());
      
      TechnicalException technicalException3 = new TechnicalException("", technicalException2, "i#>");
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertFalse(technicalException2.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException1));
      assertFalse(technicalException3.equals((Object)technicalException0));
      assertFalse(technicalException3.equals((Object)technicalException1));
      assertFalse(technicalException3.equals((Object)technicalException2));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(technicalException3);
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("DEBUG", severity0.getName());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("[[]]", technicalException1.getExtendedMessage());
      assertEquals("i#>", technicalException1.getKeyCode());
      assertEquals("NESTED", technicalException2.getKeyCode());
      assertEquals("[[i#>]] [[]]", technicalException2.getExtendedMessage());
      assertEquals("", technicalException3.getKeyCode());
      assertEquals("i#>", technicalException3.getExtendedMessage());
      
      String string0 = technicalException3.getMessage();
      assertNotSame(technicalException0, technicalException2);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException0, technicalException3);
      assertNotSame(technicalException1, technicalException3);
      assertNotSame(technicalException1, technicalException0);
      assertNotSame(technicalException1, technicalException2);
      assertNotSame(technicalException2, technicalException0);
      assertNotSame(technicalException2, technicalException1);
      assertNotSame(technicalException2, technicalException3);
      assertNotSame(technicalException3, technicalException0);
      assertNotSame(technicalException3, technicalException1);
      assertNotSame(technicalException3, technicalException2);
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertFalse(technicalException2.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException1));
      assertFalse(technicalException2.equals((Object)technicalException3));
      assertFalse(technicalException3.equals((Object)technicalException0));
      assertFalse(technicalException3.equals((Object)technicalException1));
      assertFalse(technicalException3.equals((Object)technicalException2));
      assertEquals("[[]] i#>", string0);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(string0);
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("DEBUG", severity0.getName());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("[[]]", technicalException1.getExtendedMessage());
      assertEquals("i#>", technicalException1.getKeyCode());
      assertEquals("NESTED", technicalException2.getKeyCode());
      assertEquals("[[i#>]] [[]]", technicalException2.getExtendedMessage());
      assertEquals("", technicalException3.getKeyCode());
      assertEquals("i#>", technicalException3.getExtendedMessage());
      
      technicalException3.addSuppressed(technicalException2);
      assertNotSame(technicalException0, technicalException2);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException0, technicalException3);
      assertNotSame(technicalException1, technicalException3);
      assertNotSame(technicalException1, technicalException0);
      assertNotSame(technicalException1, technicalException2);
      assertNotSame(technicalException2, technicalException0);
      assertNotSame(technicalException2, technicalException1);
      assertNotSame(technicalException2, technicalException3);
      assertNotSame(technicalException3, technicalException0);
      assertNotSame(technicalException3, technicalException1);
      assertNotSame(technicalException3, technicalException2);
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertFalse(technicalException2.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException1));
      assertFalse(technicalException2.equals((Object)technicalException3));
      assertFalse(technicalException3.equals((Object)technicalException0));
      assertFalse(technicalException3.equals((Object)technicalException1));
      assertFalse(technicalException3.equals((Object)technicalException2));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("DEBUG", severity0.getName());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("[[]]", technicalException1.getExtendedMessage());
      assertEquals("i#>", technicalException1.getKeyCode());
      assertEquals("NESTED", technicalException2.getKeyCode());
      assertEquals("[[i#>]] [[]]", technicalException2.getExtendedMessage());
      assertEquals("", technicalException3.getKeyCode());
      assertEquals("i#>", technicalException3.getExtendedMessage());
      
      technicalException0.addSuppressed(technicalException1);
      assertNotSame(technicalException0, technicalException2);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException0, technicalException3);
      assertNotSame(technicalException1, technicalException3);
      assertNotSame(technicalException1, technicalException0);
      assertNotSame(technicalException1, technicalException2);
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("DEBUG", severity0.getName());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("[[]]", technicalException1.getExtendedMessage());
      assertEquals("i#>", technicalException1.getKeyCode());
      
      technicalException3.setExtendedMessage((String) null);
      assertNotSame(technicalException0, technicalException2);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException0, technicalException3);
      assertNotSame(technicalException1, technicalException3);
      assertNotSame(technicalException1, technicalException0);
      assertNotSame(technicalException1, technicalException2);
      assertNotSame(technicalException2, technicalException0);
      assertNotSame(technicalException2, technicalException1);
      assertNotSame(technicalException2, technicalException3);
      assertNotSame(technicalException3, technicalException0);
      assertNotSame(technicalException3, technicalException1);
      assertNotSame(technicalException3, technicalException2);
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertFalse(technicalException2.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException1));
      assertFalse(technicalException2.equals((Object)technicalException3));
      assertFalse(technicalException3.equals((Object)technicalException0));
      assertFalse(technicalException3.equals((Object)technicalException1));
      assertFalse(technicalException3.equals((Object)technicalException2));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("DEBUG", severity0.getName());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("[[]]", technicalException1.getExtendedMessage());
      assertEquals("i#>", technicalException1.getKeyCode());
      assertEquals("NESTED", technicalException2.getKeyCode());
      assertEquals("[[i#>]] [[]]", technicalException2.getExtendedMessage());
      assertEquals("", technicalException3.getKeyCode());
      assertEquals("", technicalException3.getExtendedMessage());
      
      TechnicalException technicalException4 = new TechnicalException("NESTED", severity0, technicalException3, (String) null);
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertFalse(technicalException2.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException1));
      assertFalse(technicalException2.equals((Object)technicalException3));
      assertFalse(technicalException3.equals((Object)technicalException0));
      assertFalse(technicalException3.equals((Object)technicalException1));
      assertFalse(technicalException3.equals((Object)technicalException2));
      assertFalse(technicalException4.equals((Object)technicalException2));
      assertFalse(technicalException4.equals((Object)technicalException0));
      assertFalse(technicalException4.equals((Object)technicalException1));
      assertFalse(technicalException4.equals((Object)technicalException3));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(technicalException4);
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("DEBUG", severity0.getName());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("[[]]", technicalException1.getExtendedMessage());
      assertEquals("i#>", technicalException1.getKeyCode());
      assertEquals("NESTED", technicalException2.getKeyCode());
      assertEquals("[[i#>]] [[]]", technicalException2.getExtendedMessage());
      assertEquals("", technicalException3.getKeyCode());
      assertEquals("", technicalException3.getExtendedMessage());
      assertEquals("null [[]] i#>", technicalException4.getExtendedMessage());
      assertEquals("NESTED", technicalException4.getKeyCode());
      
      technicalException4.printStackTrace();
      assertNotSame(technicalException0, technicalException4);
      assertNotSame(technicalException0, technicalException2);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException0, technicalException3);
      assertNotSame(technicalException1, technicalException3);
      assertNotSame(technicalException1, technicalException0);
      assertNotSame(technicalException1, technicalException2);
      assertNotSame(technicalException1, technicalException4);
      assertNotSame(technicalException2, technicalException4);
      assertNotSame(technicalException2, technicalException0);
      assertNotSame(technicalException2, technicalException1);
      assertNotSame(technicalException2, technicalException3);
      assertNotSame(technicalException3, technicalException4);
      assertNotSame(technicalException3, technicalException0);
      assertNotSame(technicalException3, technicalException1);
      assertNotSame(technicalException3, technicalException2);
      assertNotSame(technicalException4, technicalException2);
      assertNotSame(technicalException4, technicalException0);
      assertNotSame(technicalException4, technicalException1);
      assertNotSame(technicalException4, technicalException3);
      assertFalse(technicalException0.equals((Object)technicalException4));
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException4));
      assertFalse(technicalException2.equals((Object)technicalException4));
      assertFalse(technicalException2.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException1));
      assertFalse(technicalException2.equals((Object)technicalException3));
      assertFalse(technicalException3.equals((Object)technicalException4));
      assertFalse(technicalException3.equals((Object)technicalException0));
      assertFalse(technicalException3.equals((Object)technicalException1));
      assertFalse(technicalException3.equals((Object)technicalException2));
      assertFalse(technicalException4.equals((Object)technicalException2));
      assertFalse(technicalException4.equals((Object)technicalException0));
      assertFalse(technicalException4.equals((Object)technicalException1));
      assertFalse(technicalException4.equals((Object)technicalException3));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("DEBUG", severity0.getName());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("[[]]", technicalException1.getExtendedMessage());
      assertEquals("i#>", technicalException1.getKeyCode());
      assertEquals("NESTED", technicalException2.getKeyCode());
      assertEquals("[[i#>]] [[]]", technicalException2.getExtendedMessage());
      assertEquals("", technicalException3.getKeyCode());
      assertEquals("", technicalException3.getExtendedMessage());
      assertEquals("null [[]] i#>", technicalException4.getExtendedMessage());
      assertEquals("NESTED", technicalException4.getKeyCode());
      
      technicalException1.printStackTrace();
      assertNotSame(technicalException0, technicalException4);
      assertNotSame(technicalException0, technicalException2);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException0, technicalException3);
      assertNotSame(technicalException1, technicalException3);
      assertNotSame(technicalException1, technicalException0);
      assertNotSame(technicalException1, technicalException2);
      assertNotSame(technicalException1, technicalException4);
      assertFalse(technicalException0.equals((Object)technicalException4));
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException3));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException4));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("DEBUG", severity0.getName());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("[[]]", technicalException1.getExtendedMessage());
      assertEquals("i#>", technicalException1.getKeyCode());
      
      // Undeclared exception!
      try { 
        technicalException4.printStackTrace((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TechnicalException technicalException0 = new TechnicalException("");
      assertNotNull(technicalException0);
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      
      TechnicalException technicalException1 = new TechnicalException("errors", technicalException0, "");
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertNotNull(technicalException1);
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException1.getExtendedMessage());
      assertEquals("errors", technicalException1.getKeyCode());
      
      technicalException0.addSuppressed(technicalException1);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException1, technicalException0);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException1.getExtendedMessage());
      assertEquals("errors", technicalException1.getKeyCode());
      
      technicalException0.printStackTrace();
      assertNotSame(technicalException0, technicalException1);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      
      PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      technicalException1.printStackTrace(printStream0);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException1, technicalException0);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException1.getExtendedMessage());
      assertEquals("errors", technicalException1.getKeyCode());
      
      String string0 = technicalException1.getLocalizedMessage();
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException1, technicalException0);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertEquals("[[errors]]", string0);
      assertNotNull(string0);
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException1.getExtendedMessage());
      assertEquals("errors", technicalException1.getKeyCode());
      
      PrintStream printStream1 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      technicalException1.printStackTrace(printStream1);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException1, technicalException0);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException1.getExtendedMessage());
      assertEquals("errors", technicalException1.getKeyCode());
      
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null).when(printWriter0).append(any(java.lang.CharSequence.class));
      technicalException1.printStackTrace(printWriter0);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException1, technicalException0);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException1.getExtendedMessage());
      assertEquals("errors", technicalException1.getKeyCode());
      
      Severity severity0 = Severity.ERROR;
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(severity0);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      
      technicalException0.printStackTrace();
      assertNotSame(technicalException0, technicalException1);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      
      TechnicalException technicalException2 = new TechnicalException("^I", severity0, technicalException1, "");
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException1));
      assertFalse(technicalException2.equals((Object)technicalException0));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(technicalException2);
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException1.getExtendedMessage());
      assertEquals("errors", technicalException1.getKeyCode());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals(" [[errors]]", technicalException2.getExtendedMessage());
      assertEquals("^I", technicalException2.getKeyCode());
      
      technicalException0.addSuppressed(technicalException2);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException0, technicalException2);
      assertNotSame(technicalException1, technicalException2);
      assertNotSame(technicalException1, technicalException0);
      assertNotSame(technicalException2, technicalException1);
      assertNotSame(technicalException2, technicalException0);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException1));
      assertFalse(technicalException2.equals((Object)technicalException0));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException1.getExtendedMessage());
      assertEquals("errors", technicalException1.getKeyCode());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals(" [[errors]]", technicalException2.getExtendedMessage());
      assertEquals("^I", technicalException2.getKeyCode());
      
      Collection collection0 = Severity.getSeverities();
      assertNotNull(collection0);
      
      Severity severity1 = Severity.getSeverity("8i>");
      assertNull(severity1);
      
      technicalException1.severity = severity0;
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("ERROR", technicalException1.severity.getName());
      assertEquals(2, technicalException1.severity.getIntLevel());
      assertEquals("ERROR", technicalException1.severity.toString());
      assertEquals("", technicalException1.getExtendedMessage());
      assertEquals("errors", technicalException1.getKeyCode());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      
      technicalException1.printStackTrace();
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException0, technicalException2);
      assertNotSame(technicalException1, technicalException2);
      assertNotSame(technicalException1, technicalException0);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException1.getExtendedMessage());
      assertEquals("errors", technicalException1.getKeyCode());
      
      technicalException1.printStackTrace();
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException0, technicalException2);
      assertNotSame(technicalException1, technicalException2);
      assertNotSame(technicalException1, technicalException0);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException1.getExtendedMessage());
      assertEquals("errors", technicalException1.getKeyCode());
      
      Throwable throwable0 = technicalException0.getOriginalException();
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException0, technicalException2);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertNotNull(throwable0);
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertNull(throwable0.getMessage());
      
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null).when(printWriter1).append(any(java.lang.CharSequence.class));
      technicalException0.printStackTrace(printWriter1);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException0, technicalException2);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      
      PrintWriter printWriter2 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null).when(printWriter2).append(any(java.lang.CharSequence.class));
      technicalException2.printStackTrace(printWriter2);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException0, technicalException2);
      assertNotSame(technicalException1, technicalException2);
      assertNotSame(technicalException1, technicalException0);
      assertNotSame(technicalException2, technicalException1);
      assertNotSame(technicalException2, technicalException0);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException1));
      assertFalse(technicalException2.equals((Object)technicalException0));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException1.getExtendedMessage());
      assertEquals("errors", technicalException1.getKeyCode());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals(" [[errors]]", technicalException2.getExtendedMessage());
      assertEquals("^I", technicalException2.getKeyCode());
      
      PrintStream printStream2 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      technicalException1.printStackTrace(printStream2);
      assertNotSame(technicalException0, technicalException1);
      assertNotSame(technicalException0, technicalException2);
      assertNotSame(technicalException1, technicalException2);
      assertNotSame(technicalException1, technicalException0);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertEquals("", technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("", technicalException1.getExtendedMessage());
      assertEquals("errors", technicalException1.getKeyCode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = null;
      Severity severity0 = Severity.INFO;
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertNotNull(severity0);
      assertEquals(4, severity0.getIntLevel());
      assertEquals("INFO", severity0.toString());
      assertEquals("INFO", severity0.getName());
      
      TechnicalException technicalException0 = new TechnicalException((String) null);
      assertNotNull(technicalException0);
      assertNull(technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      
      TechnicalException technicalException1 = new TechnicalException("mS", severity0, technicalException0);
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertNotNull(technicalException1);
      assertEquals(4, severity0.getIntLevel());
      assertEquals("INFO", severity0.toString());
      assertEquals("INFO", severity0.getName());
      assertNull(technicalException0.getKeyCode());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("[[null]]", technicalException1.getExtendedMessage());
      assertEquals("mS", technicalException1.getKeyCode());
      
      // Undeclared exception!
      try { 
        Severity.getSeverity((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.exception.core.Severity", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Severity severity0 = Severity.ERROR;
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(4, Severity.INFO_INT);
      assertNotNull(severity0);
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.toString());
      
      TechnicalException technicalException0 = new TechnicalException("UC");
      assertNotNull(technicalException0);
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("UC", technicalException0.getKeyCode());
      
      TechnicalException technicalException1 = new TechnicalException("UC", technicalException0);
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertNotNull(technicalException1);
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("UC", technicalException0.getKeyCode());
      assertEquals("[[UC]]", technicalException1.getExtendedMessage());
      assertEquals("UC", technicalException1.getKeyCode());
      
      TechnicalException technicalException2 = new TechnicalException("K>+p", severity0, technicalException1);
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException1));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(4, Severity.INFO_INT);
      assertNotNull(technicalException2);
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("UC", technicalException0.getKeyCode());
      assertEquals("[[UC]]", technicalException1.getExtendedMessage());
      assertEquals("UC", technicalException1.getKeyCode());
      assertEquals("K>+p", technicalException2.getKeyCode());
      assertEquals("[[UC]] [[UC]]", technicalException2.getExtendedMessage());
      
      TechnicalException technicalException3 = new TechnicalException((String) null, technicalException2, "_`mCX`7Bz^&");
      assertFalse(technicalException0.equals((Object)technicalException1));
      assertFalse(technicalException0.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException2));
      assertFalse(technicalException1.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException0));
      assertFalse(technicalException2.equals((Object)technicalException1));
      assertFalse(technicalException3.equals((Object)technicalException2));
      assertFalse(technicalException3.equals((Object)technicalException0));
      assertFalse(technicalException3.equals((Object)technicalException1));
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(4, Severity.INFO_INT);
      assertNotNull(technicalException3);
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", technicalException0.getExtendedMessage());
      assertEquals("UC", technicalException0.getKeyCode());
      assertEquals("[[UC]]", technicalException1.getExtendedMessage());
      assertEquals("UC", technicalException1.getKeyCode());
      assertEquals("K>+p", technicalException2.getKeyCode());
      assertEquals("[[UC]] [[UC]]", technicalException2.getExtendedMessage());
      assertEquals("_`mCX`7Bz^&", technicalException3.getExtendedMessage());
      assertNull(technicalException3.getKeyCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TechnicalException technicalException0 = new TechnicalException("");
      technicalException0.printStackTrace();
      technicalException0.getCause();
      Severity severity0 = Severity.INFO;
      Severity.getSeverities();
      Severity.getSeverity("");
      Severity.getSeverities();
      technicalException0.getStackTrace();
      Severity.getSeverity("");
      technicalException0.severity = severity0;
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null).when(printWriter0).append(any(java.lang.CharSequence.class));
      technicalException0.printStackTrace(printWriter0);
      technicalException0.getSuppressed();
      Severity.getSeverities();
      PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      technicalException0.printStackTrace(printStream0);
      technicalException0.getOriginalException();
      technicalException0.getSuppressed();
      Severity.getSeverities();
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null).when(printWriter1).append(any(java.lang.CharSequence.class));
      technicalException0.printStackTrace(printWriter1);
      // Undeclared exception!
      try { 
        technicalException0.printStackTrace((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TechnicalException technicalException0 = new TechnicalException("", (Throwable) null, "_");
      technicalException0.getSuppressed();
      technicalException0.getSuppressed();
      technicalException0.getMessage();
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null).when(printWriter0).append(any(java.lang.CharSequence.class));
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null).when(printWriter1).append(any(java.lang.CharSequence.class));
      technicalException0.printStackTrace(printWriter1);
      technicalException0.getSuppressed();
      technicalException0.getStackTrace();
      technicalException0.printStackTrace(printWriter0);
      technicalException0.getStackTrace();
      technicalException0.getOriginalException();
      technicalException0.getOriginalException();
      technicalException0.printStackTrace();
      technicalException0.printStackTrace();
      assertEquals("_", technicalException0.getExtendedMessage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TechnicalException technicalException0 = new TechnicalException("");
      Throwable throwable0 = technicalException0.getOriginalException();
      assertNull(throwable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TechnicalException technicalException0 = new TechnicalException("h;Qhb+pN)+H&");
      TechnicalException technicalException1 = new TechnicalException("", (Severity) null, technicalException0, "");
      technicalException1.severity = null;
      TechnicalException technicalException2 = new TechnicalException("h;Qhb+pN)+H&", (Severity) null, technicalException0, "N1>>sOZ`nZ$_\"");
      PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      technicalException2.printStackTrace(printStream0);
      technicalException2.toString();
      technicalException2.getLocalizedMessage();
      technicalException1.initCause(technicalException2);
      technicalException1.getOriginalException();
      technicalException1.printStackTrace();
      PrintStream printStream1 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      technicalException0.printStackTrace(printStream1);
      assertNotSame(technicalException0, technicalException2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      Severity severity0 = Severity.ERROR;
      Severity.getSeverity("");
      Severity.getSeverities();
      String string1 = "w1tcM\\lXS>T";
      Throwable throwable0 = null;
      TechnicalException technicalException0 = null;
      try {
        technicalException0 = new TechnicalException("w1tcMlXS>T", severity0, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.araguacaima.commons.exception.core.TechnicalException", e);
      }
  }
}
