/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 05 19:24:22 GMT 2017
 */

package org.araguacaima.commons.exception.core;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Collection;
import java.util.Iterator;
import java.util.function.Consumer;
import java.util.function.Predicate;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.runtime.MockitoExtension.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.any;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS = true,
                     useVNET = true,
                     resetStaticState = true,
                     separateClassLoader = true,
                     useJEE = true)
public class StackException_ESTest extends StackException_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00()
            throws Throwable {
        Severity severity0 = Severity.DEBUG;
        Collection collection0 = Severity.getSeverities();
        Severity.getSeverity("=30mG_X|3{,EIiZo*");
        StackException stackException0 = new StackException("%Z,VV+&1Si'QO?", severity0);
        StackException stackException1 = new StackException("%Z,VV+&1Si'QO?", severity0);
        stackException1.getMessage();
        stackException0.toArray();
        stackException0.containsAll(stackException1);
        stackException0.addAll(stackException1);
        stackException1.remove(stackException0);
        stackException1.containsAll(stackException0);
        PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn((PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null).when(printWriter0).append(any(CharSequence.class));
        stackException0.printStackTrace(printWriter0);
        stackException0.magicValue = (Object) "=30mG_X|3{,EIiZo*";
        stackException1.parallelStream();
        Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        stackException0.removeIf(predicate0);
        Collection collection1 = Severity.getSeverities();
        stackException1.add(stackException0);
        Throwable[] throwableArray0 = stackException1.getSuppressed();
        stackException0.iterator();
        stackException1.isEmpty();
        stackException0.containsAll(collection0);
        stackException1.retainAll(collection0);
        stackException1.clear();
        stackException0.retainAll(collection0);
        stackException1.clear();
        stackException1.containsAll(collection1);
        stackException1.containsAll(stackException0);
        stackException1.addAll(collection1);
        stackException0.clear();
        stackException0.addAll(collection1);
        stackException0.contains("=30mG_X|3{,EIiZo*");
        // Undeclared exception!
        try {
            stackException0.toArray((Object[]) throwableArray0);
            fail("Expecting exception: ArrayStoreException");

        } catch (ArrayStoreException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Arrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test01()
            throws Throwable {
        Severity.getSeverity("org.araguacaima.commons.exception.core.StackException");
        StackException stackException0 = new StackException("org.araguacaima.commons.exception.core.StackException",
                (Severity) null,
                "org.araguacaima.commons.exception.core.StackException");
        stackException0.add("org.araguacaima.commons.exception.core.StackException");
        stackException0.remove("org.araguacaima.commons.exception.core.StackException");
        stackException0.remove("org.araguacaima.commons.exception.core.StackException");
    }

    @Test(timeout = 4000)
    public void test02()
            throws Throwable {
        Severity severity0 = Severity.INFO;
        StackException stackException0 = new StackException("<-", severity0);
        Predicate<Integer> predicate0 = (Predicate<Integer>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        stackException0.removeIf(predicate0);
        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        Severity.getSeverity("<-");
        stackException0.fillInStackTrace();
        // Undeclared exception!
        try {
            stackException0.retainAll((Collection) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Objects", e);
        }
    }

    @Test(timeout = 4000)
    public void test03()
            throws Throwable {
        Severity severity0 = mock(Severity.class, new ViolatedAssumptionAnswer());
        StackException stackException0 = new StackException("", severity0, "G<opyf");
        // Undeclared exception!
        try {
            stackException0.removeAll((Collection) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Objects", e);
        }
    }

    @Test(timeout = 4000)
    public void test04()
            throws Throwable {
        Severity severity0 = Severity.INFO;
        StackException stackException0 = new StackException("\"V$h|zu!ovV}",
                severity0,
                "org.araguacaima.commons.exception.core.StackException");
        stackException0.size();
        stackException0.toArray();
        Object[] objectArray0 = stackException0.toArray();
        stackException0.toArray(objectArray0);
    }

    @Test(timeout = 4000)
    public void test05()
            throws Throwable {
        Severity severity0 = Severity.WARNING;
        Collection collection0 = Severity.getSeverities();
        Collection collection1 = Severity.getSeverities();
        Collection collection2 = Severity.getSeverities();
        StackException stackException0 = new StackException("", severity0);
        Severity.getSeverity("");
        stackException0.stream();
        StackException stackException1 = new StackException("", severity0);
        Object object0 = new Object();
        stackException1.add(object0);
        stackException0.containsAll(stackException1);
        stackException0.clear();
        stackException1.retainAll(collection0);
        stackException0.addAll(collection1);
        stackException0.removeAll(collection2);
        stackException0.isEmpty();
        stackException1.removeAll(collection2);
        stackException1.retainAll(collection2);
        Object object1 = new Object();
        stackException0.contains(object1);
    }

    @Test(timeout = 4000)
    public void test06()
            throws Throwable {
        Severity severity0 = Severity.FATAL;
        StackException stackException0 = new StackException("", severity0, "*'k~~$4BOzjZr<g:3BA");
        stackException0.size();
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) severity0;
        stackException0.toArray(objectArray0);
    }

    @Test(timeout = 4000)
    public void test07()
            throws Throwable {
        StackException stackException0 = new StackException("", (Severity) null);
        stackException0.getLocalizedMessage();
        StackException stackException1 = new StackException("", (Severity) null, "[p|WVM0r0V");
        stackException1.stream();
        stackException1.getLocalizedMessage();
        stackException1.severity = null;
        stackException1.magicValue = (Object) "";
        stackException0.add("");
        stackException0.retainAll(stackException1);
        stackException1.size();
        stackException0.retainAll(stackException1);
        stackException0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test08()
            throws Throwable {
        Severity severity0 = Severity.WARNING;
        Collection collection0 = Severity.getSeverities();
        StackException stackException0 = new StackException("", severity0);
        stackException0.remove(collection0);
        stackException0.magicValue = (Object) collection0;
        Severity.getSeverities();
        stackException0.toArray();
        stackException0.iterator();
        stackException0.size();
        Severity.getSeverities();
        stackException0.containsAll(collection0);
        stackException0.getStackTrace();
        stackException0.add(severity0);
        stackException0.getMessage();
        stackException0.contains("YPS");
        stackException0.add("YPS");
        Object object0 = new Object();
        stackException0.contains(object0);
        stackException0.contains("[[]]");
        stackException0.size();
        stackException0.size();
        stackException0.add("+z~*:lv+");
        stackException0.isEmpty();
        stackException0.iterator();
        Severity severity1 = Severity.WARNING;
        stackException0.contains(severity1);
        Severity severity2 = Severity.FATAL;
        Object object1 = stackException0.magicValue;
        stackException0.remove(object1);
        stackException0.contains(severity2);
        stackException0.size();
        stackException0.add("");
        stackException0.isEmpty();
        stackException0.iterator();
    }

    @Test(timeout = 4000)
    public void test09()
            throws Throwable {
        Severity severity0 = Severity.WARNING;
        Severity.getSeverities();
        Collection collection0 = Severity.getSeverities();
        StackException stackException0 = new StackException((String) null, severity0, (String) null);
        PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn((PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null).when(printWriter0).append(any(CharSequence.class));
        Severity.getSeverity("");
        stackException0.printStackTrace(printWriter0);
        stackException0.getStackTrace();
        Severity.getSeverity("");
        stackException0.toArray();
        stackException0.removeAll(collection0);
        Severity.getSeverities();
        Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        stackException0.forEach(consumer0);
        stackException0.add(severity0);
        stackException0.isEmpty();
        stackException0.iterator();
        Object object0 = new Object();
        stackException0.add(object0);
        stackException0.toArray();
    }

    @Test(timeout = 4000)
    public void test10()
            throws Throwable {
        Severity severity0 = Severity.DEBUG;
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) severity0;
        StackException stackException0 = new StackException("", severity0);
        Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        stackException0.removeIf(predicate0);
        Severity.getSeverity("org.araguacaima.commons.exception.core.StackException");
        Predicate<Integer> predicate1 = (Predicate<Integer>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        objectArray0[1] = (Object) severity0;
        Severity.getSeverity("n;$]\"^DWL|j5]un#5");
    }

    @Test(timeout = 4000)
    public void test11()
            throws Throwable {
        Severity severity0 = Severity.INFO;
        StackException stackException0 = new StackException((String) null, severity0);
        stackException0.magicValue = (Object) null;
        stackException0.iterator();
        stackException0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test12()
            throws Throwable {
        Severity severity0 = mock(Severity.class, new ViolatedAssumptionAnswer());
        StackException stackException0 = new StackException("G", severity0, "G");
        stackException0.toArray();
        stackException0.iterator();
        stackException0.add("G");
        stackException0.toString();
        // Undeclared exception!
        try {
            stackException0.addAll((Collection) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Vector", e);
        }
    }

    @Test(timeout = 4000)
    public void test13()
            throws Throwable {
        String string0 = "";
        Severity severity0 = mock(Severity.class, new ViolatedAssumptionAnswer());
        StackException stackException0 = new StackException("", severity0);
        stackException0.getStackTrace();
        stackException0.size();
        Object[] objectArray0 = null;
        stackException0.toArray();
        // Undeclared exception!
        try {
            stackException0.toArray((Object[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Vector", e);
        }
    }

    @Test(timeout = 4000)
    public void test14()
            throws Throwable {
        Severity severity0 = mock(Severity.class, new ViolatedAssumptionAnswer());
        StackException stackException0 = new StackException("", severity0, "");
        stackException0.isEmpty();
        Iterator iterator0 = stackException0.iterator();
        Severity severity1 = mock(Severity.class, new ViolatedAssumptionAnswer());
        StackException stackException1 = new StackException("oV5", severity1);
        stackException0.clear();
        stackException1.fillInStackTrace();
        stackException0.retainAll(stackException1);
        stackException0.containsAll(stackException1);
        stackException1.contains(iterator0);
        stackException1.containsAll(stackException0);
        Severity severity2 = mock(Severity.class, new ViolatedAssumptionAnswer());
        StackException stackException2 = new StackException("", severity2);
        Object object0 = stackException2.magicValue;
        stackException0.add((Object) null);
        stackException1.removeAll(stackException0);
        stackException1.isEmpty();
    }

    @Test(timeout = 4000)
    public void test15()
            throws Throwable {
        Severity severity0 = mock(Severity.class, new ViolatedAssumptionAnswer());
        StackException stackException0 = new StackException("org.araguacaima.commons.exception.core.ApplicationException",
                severity0);
        Severity severity1 = mock(Severity.class, new ViolatedAssumptionAnswer());
        StackException stackException1 = new StackException("org.araguacaima.commons.exception.core.ApplicationException",
                severity1,
                "");
        Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        stackException1.forEach(consumer0);
        stackException0.retainAll(stackException1);
        stackException1.retainAll(stackException0);
    }

    @Test(timeout = 4000)
    public void test16()
            throws Throwable {
        Severity severity0 = mock(Severity.class, new ViolatedAssumptionAnswer());
        StackException stackException0 = new StackException("WARNING", severity0, "xQunKq");
        assertTrue(stackException0.isEmpty());
        assertEquals("WARNING", stackException0.getKeyCode());
        assertEquals("xQunKq", stackException0.getExtendedMessage());
        assertNotNull(stackException0);

        int int0 = stackException0.size();
        assertTrue(stackException0.isEmpty());
        assertEquals("WARNING", stackException0.getKeyCode());
        assertEquals("xQunKq", stackException0.getExtendedMessage());
        assertEquals(0, int0);

        Iterator iterator0 = stackException0.iterator();
        assertTrue(stackException0.isEmpty());
        assertEquals("WARNING", stackException0.getKeyCode());
        assertEquals("xQunKq", stackException0.getExtendedMessage());
        assertNotNull(iterator0);

        String string0 = stackException0.toString();
        assertTrue(stackException0.isEmpty());
        assertEquals("WARNING", stackException0.getKeyCode());
        assertEquals("xQunKq", stackException0.getExtendedMessage());
        assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: [[WARNING]] xQunKq", string0);
        assertNotNull(string0);

        Object object0 = stackException0.magicValue;
        assertNull(object0);

        boolean boolean0 = stackException0.contains((Object) null);
        assertTrue(stackException0.isEmpty());
        assertEquals("WARNING", stackException0.getKeyCode());
        assertEquals("xQunKq", stackException0.getExtendedMessage());
        assertFalse(boolean0);

        boolean boolean1 = stackException0.isEmpty();
        assertTrue(stackException0.isEmpty());
        assertEquals("WARNING", stackException0.getKeyCode());
        assertEquals("xQunKq", stackException0.getExtendedMessage());
        assertFalse(boolean1 == boolean0);
        assertTrue(boolean1);

        Severity severity1 = mock(Severity.class, new ViolatedAssumptionAnswer());
        StackException stackException1 = new StackException("", severity1);
        assertTrue(stackException1.isEmpty());
        assertEquals("", stackException1.getKeyCode());
        assertEquals("", stackException1.getExtendedMessage());
        assertFalse(stackException1.equals((Object) stackException0));
        assertNotNull(stackException1);

        boolean boolean2 = stackException0.containsAll(stackException1);
        assertTrue(stackException0.isEmpty());
        assertEquals("WARNING", stackException0.getKeyCode());
        assertEquals("xQunKq", stackException0.getExtendedMessage());
        assertTrue(stackException1.isEmpty());
        assertEquals("", stackException1.getKeyCode());
        assertEquals("", stackException1.getExtendedMessage());
        assertFalse(stackException0.equals((Object) stackException1));
        assertFalse(stackException1.equals((Object) stackException0));
        assertFalse(boolean2 == boolean1);
        assertTrue(boolean2 == boolean0);
        assertNotSame(stackException0, stackException1);
        assertNotSame(stackException1, stackException0);
        assertFalse(boolean2);

        int int1 = stackException1.size();
        assertTrue(stackException1.isEmpty());
        assertEquals("", stackException1.getKeyCode());
        assertEquals("", stackException1.getExtendedMessage());
        assertFalse(stackException1.equals((Object) stackException0));
        assertTrue(int1 == int0);
        assertNotSame(stackException1, stackException0);
        assertEquals(0, int1);

        stackException1.clear();
        assertTrue(stackException1.isEmpty());
        assertEquals("", stackException1.getKeyCode());
        assertEquals("", stackException1.getExtendedMessage());
        assertFalse(stackException1.equals((Object) stackException0));
        assertNotSame(stackException1, stackException0);

        int int2 = stackException1.size();
        assertTrue(stackException1.isEmpty());
        assertEquals("", stackException1.getKeyCode());
        assertEquals("", stackException1.getExtendedMessage());
        assertFalse(stackException1.equals((Object) stackException0));
        assertTrue(int2 == int1);
        assertTrue(int2 == int0);
        assertNotSame(stackException1, stackException0);
        assertEquals(0, int2);

        boolean boolean3 = stackException1.isEmpty();
        assertTrue(stackException1.isEmpty());
        assertEquals("", stackException1.getKeyCode());
        assertEquals("", stackException1.getExtendedMessage());
        assertFalse(stackException1.equals((Object) stackException0));
        assertFalse(boolean3 == boolean0);
        assertTrue(boolean3 == boolean1);
        assertFalse(boolean3 == boolean2);
        assertNotSame(stackException1, stackException0);
        assertTrue(boolean3);

        boolean boolean4 = stackException1.add("1 Rtjx=0v\"");
        assertEquals("", stackException1.getKeyCode());
        assertFalse(stackException1.isEmpty());
        assertEquals("", stackException1.getExtendedMessage());
        assertFalse(stackException1.equals((Object) stackException0));
        assertFalse(boolean4 == boolean2);
        assertTrue(boolean4 == boolean1);
        assertTrue(boolean4 == boolean3);
        assertFalse(boolean4 == boolean0);
        assertNotSame(stackException1, stackException0);
        assertTrue(boolean4);
    }

    @Test(timeout = 4000)
    public void test17()
            throws Throwable {
        Severity severity0 = mock(Severity.class, new ViolatedAssumptionAnswer());
        StackException stackException0 = new StackException("", severity0, "");
        stackException0.stream();
        StackException stackException1 = (StackException) stackException0.fillInStackTrace();
        StackException stackException2 = (StackException) stackException0.fillInStackTrace();
        stackException0.clear();
        stackException0.remove("");
        Severity severity1 = mock(Severity.class, new ViolatedAssumptionAnswer());
        stackException0.size();
        StackException stackException3 = new StackException("", severity1, "org.araguacaima.commons.exception.core.Severity");
        stackException0.removeAll(stackException3);
        stackException3.removeAll(stackException0);
        stackException0.contains((Object) null);
        stackException0.size();
        Severity severity2 = mock(Severity.class, new ViolatedAssumptionAnswer());
        Object object0 = stackException0.magicValue;
        boolean boolean0 = stackException3.contains((Object) null);
        stackException0.addAll(stackException1);
        stackException0.addAll(stackException3);
        Object object1 = stackException3.magicValue;
        stackException0.contains((Object) null);
        stackException0.add((Object) null);
        stackException3.contains((Object) null);
        stackException1.size();
        stackException0.addAll(stackException2);
        boolean boolean1 = stackException0.containsAll((Collection) null);
        assertTrue(boolean1);

        boolean boolean2 = stackException3.containsAll((Collection) null);
        assertTrue(boolean2 == boolean0);

        stackException2.add("");
        stackException3.retainAll(stackException0);
        boolean boolean3 = stackException2.addAll(stackException0);
        assertFalse(boolean3 == boolean2);
    }
}
