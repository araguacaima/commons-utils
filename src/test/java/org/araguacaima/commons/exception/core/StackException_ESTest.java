/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 06 20:15:18 GMT 2017
 */

package org.araguacaima.commons.exception.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.util.Collection;
import java.util.Iterator;
import org.araguacaima.commons.exception.core.Severity;
import org.araguacaima.commons.exception.core.StackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackException_ESTest extends StackException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Severity severity0 = Severity.DEBUG;
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertNotNull(severity0);
      assertEquals("DEBUG", severity0.getName());
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      
      Collection collection0 = Severity.getSeverities();
      assertNotNull(collection0);
      
      StackException stackException0 = new StackException("", severity0, "");
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertNotNull(stackException0);
      assertEquals("DEBUG", severity0.getName());
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("", stackException0.getExtendedMessage());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getKeyCode());
      
      Object[] objectArray0 = stackException0.toArray();
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertNotNull(objectArray0);
      assertEquals("DEBUG", severity0.getName());
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("", stackException0.getExtendedMessage());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getKeyCode());
      
      Object[] objectArray1 = stackException0.toArray(objectArray0);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals("DEBUG", severity0.getName());
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertEquals("", stackException0.getExtendedMessage());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getKeyCode());
      
      boolean boolean0 = stackException0.add(collection0);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertTrue(boolean0);
      assertEquals("DEBUG", severity0.getName());
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertFalse(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertEquals("", stackException0.getKeyCode());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = stackException0.add(object0);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertTrue(boolean1);
      assertEquals("DEBUG", severity0.getName());
      assertEquals("DEBUG", severity0.toString());
      assertEquals(5, severity0.getIntLevel());
      assertFalse(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertEquals("", stackException0.getKeyCode());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Severity severity0 = Severity.ERROR;
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertNotNull(severity0);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      
      StackException stackException0 = new StackException("", severity0);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertNotNull(stackException0);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("", stackException0.getExtendedMessage());
      
      String string0 = stackException0.toString();
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertNotNull(string0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: [[]]", string0);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("", stackException0.getExtendedMessage());
      
      Severity severity1 = Severity.getSeverity("");
      assertNull(severity1);
      
      boolean boolean0 = stackException0.contains("");
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertFalse(boolean0);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("", stackException0.getExtendedMessage());
      
      boolean boolean1 = stackException0.remove("");
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertFalse(boolean1);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("", stackException0.getExtendedMessage());
      assertTrue(boolean1 == boolean0);
      
      Severity severity2 = Severity.getSeverity("org.evosuite.runtime.mock.java.lang.MockThrowable: [[]]");
      assertNull(severity2);
      
      Severity severity3 = Severity.getSeverity("org.araguacaima.commons.exception.core.StackException");
      assertNull(severity3);
      
      // Undeclared exception!
      try { 
        stackException0.addAll((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Severity severity0 = Severity.WARNING;
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(severity0);
      assertEquals("WARNING", severity0.toString());
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      
      StackException stackException0 = new StackException("puR$\"qq,'=", severity0);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(stackException0);
      assertEquals("WARNING", severity0.toString());
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("puR$\"qq,'=", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      
      Collection<Object> collection0 = Severity.getSeverities();
      assertNotNull(collection0);
      
      Severity severity1 = Severity.getSeverity("puR$\"qq,'=");
      assertNull(severity1);
      
      Collection<Object> collection1 = Severity.getSeverities();
      assertNotNull(collection1);
      assertSame(collection1, collection0);
      
      boolean boolean0 = stackException0.add(severity0);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertTrue(boolean0);
      assertEquals("WARNING", severity0.toString());
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("puR$\"qq,'=", stackException0.getKeyCode());
      assertFalse(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      
      stackException0.severity = severity0;
      assertEquals("WARNING", severity0.toString());
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("puR$\"qq,'=", stackException0.getKeyCode());
      assertFalse(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertEquals("WARNING", stackException0.severity.getName());
      assertEquals("WARNING", stackException0.severity.toString());
      assertEquals(3, stackException0.severity.getIntLevel());
      
      Throwable[] throwableArray0 = stackException0.getSuppressed();
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(throwableArray0);
      assertEquals("WARNING", severity0.toString());
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("puR$\"qq,'=", stackException0.getKeyCode());
      assertFalse(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      
      Collection<Object> collection2 = Severity.getSeverities();
      assertNotNull(collection2);
      assertSame(collection2, collection1);
      assertSame(collection2, collection0);
      
      boolean boolean1 = stackException0.retainAll(collection2);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertSame(collection2, collection1);
      assertSame(collection2, collection0);
      assertTrue(boolean1);
      assertEquals("WARNING", severity0.toString());
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("puR$\"qq,'=", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = stackException0.remove("puR$\"qq,'=");
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertFalse(boolean2);
      assertEquals("WARNING", severity0.toString());
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("puR$\"qq,'=", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Throwable[] throwableArray1 = stackException0.getSuppressed();
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(throwableArray1);
      assertSame(throwableArray1, throwableArray0);
      assertEquals("WARNING", severity0.toString());
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("puR$\"qq,'=", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      
      boolean boolean3 = stackException0.retainAll(collection0);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertSame(collection0, collection1);
      assertSame(collection0, collection2);
      assertFalse(boolean3);
      assertEquals("WARNING", severity0.toString());
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("puR$\"qq,'=", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      Collection<Object> collection3 = Severity.getSeverities();
      assertNotNull(collection3);
      assertSame(collection3, collection0);
      assertSame(collection3, collection1);
      assertSame(collection3, collection2);
      
      boolean boolean4 = stackException0.addAll(collection2);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertSame(collection2, collection3);
      assertSame(collection2, collection1);
      assertSame(collection2, collection0);
      assertTrue(boolean4);
      assertEquals("WARNING", severity0.toString());
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("puR$\"qq,'=", stackException0.getKeyCode());
      assertFalse(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      
      Iterator<Object> iterator0 = stackException0.iterator();
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(iterator0);
      assertEquals("WARNING", severity0.toString());
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("puR$\"qq,'=", stackException0.getKeyCode());
      assertFalse(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      
      // Undeclared exception!
      try { 
        stackException0.toArray((Object[]) throwableArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Severity severity0 = Severity.FATAL;
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(severity0);
      assertEquals("FATAL", severity0.getName());
      assertEquals("FATAL", severity0.toString());
      assertEquals(1, severity0.getIntLevel());
      
      StackException stackException0 = new StackException("{dFhl<`)l9}XBq@i%", severity0);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(stackException0);
      assertEquals("FATAL", severity0.getName());
      assertEquals("FATAL", severity0.toString());
      assertEquals(1, severity0.getIntLevel());
      assertEquals("", stackException0.getExtendedMessage());
      assertEquals("{dFhl<`)l9}XBq@i%", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      
      int int0 = stackException0.size();
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(0, int0);
      assertEquals("FATAL", severity0.getName());
      assertEquals("FATAL", severity0.toString());
      assertEquals(1, severity0.getIntLevel());
      assertEquals("", stackException0.getExtendedMessage());
      assertEquals("{dFhl<`)l9}XBq@i%", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      
      // Undeclared exception!
      try { 
        stackException0.removeAll((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Severity severity0 = Severity.WARNING;
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertNotNull(severity0);
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("WARNING", severity0.toString());
      
      Collection collection0 = Severity.getSeverities();
      assertNotNull(collection0);
      
      Severity severity1 = Severity.getSeverity("Rd38G(+O\"+");
      assertNull(severity1);
      
      StackException stackException0 = new StackException("Rd38G(+O\"+", severity0, "");
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertNotNull(stackException0);
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("WARNING", severity0.toString());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertEquals("Rd38G(+O\"+", stackException0.getKeyCode());
      
      Object[] objectArray0 = stackException0.toArray();
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertNotNull(objectArray0);
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("WARNING", severity0.toString());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertEquals("Rd38G(+O\"+", stackException0.getKeyCode());
      
      boolean boolean0 = stackException0.remove("");
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertFalse(boolean0);
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("WARNING", severity0.toString());
      assertTrue(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertEquals("Rd38G(+O\"+", stackException0.getKeyCode());
      
      Object object0 = stackException0.magicValue;
      assertNull(object0);
      
      boolean boolean1 = stackException0.add((Object) null);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertTrue(boolean1);
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("WARNING", severity0.toString());
      assertFalse(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertEquals("Rd38G(+O\"+", stackException0.getKeyCode());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = stackException0.addAll(collection0);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertTrue(boolean2);
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("WARNING", severity0.toString());
      assertFalse(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertEquals("Rd38G(+O\"+", stackException0.getKeyCode());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Iterator iterator0 = stackException0.iterator();
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertNotNull(iterator0);
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("WARNING", severity0.toString());
      assertFalse(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertEquals("Rd38G(+O\"+", stackException0.getKeyCode());
      
      boolean boolean3 = stackException0.addAll(collection0);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertTrue(boolean3);
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("WARNING", severity0.toString());
      assertFalse(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertEquals("Rd38G(+O\"+", stackException0.getKeyCode());
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = stackException0.retainAll(collection0);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertTrue(boolean4);
      assertEquals("WARNING", severity0.getName());
      assertEquals(3, severity0.getIntLevel());
      assertEquals("WARNING", severity0.toString());
      assertFalse(stackException0.isEmpty());
      assertEquals("", stackException0.getExtendedMessage());
      assertEquals("Rd38G(+O\"+", stackException0.getKeyCode());
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Severity severity0 = Severity.ERROR;
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertNotNull(severity0);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      
      StackException stackException0 = new StackException("N*%paB4K*l\"6grUM", severity0);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertNotNull(stackException0);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("", stackException0.getExtendedMessage());
      assertTrue(stackException0.isEmpty());
      assertEquals("N*%paB4K*l\"6grUM", stackException0.getKeyCode());
      
      Collection<Object> collection0 = Severity.getSeverities();
      assertNotNull(collection0);
      
      stackException0.printStackTrace();
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("", stackException0.getExtendedMessage());
      assertTrue(stackException0.isEmpty());
      assertEquals("N*%paB4K*l\"6grUM", stackException0.getKeyCode());
      
      Severity severity1 = Severity.getSeverity("N*%paB4K*l\"6grUM");
      assertNull(severity1);
      
      int int0 = stackException0.size();
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(0, int0);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("", stackException0.getExtendedMessage());
      assertTrue(stackException0.isEmpty());
      assertEquals("N*%paB4K*l\"6grUM", stackException0.getKeyCode());
      
      String string0 = stackException0.getLocalizedMessage();
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertNotNull(string0);
      assertEquals("[[N*%paB4K*l\"6grUM]]", string0);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("", stackException0.getExtendedMessage());
      assertTrue(stackException0.isEmpty());
      assertEquals("N*%paB4K*l\"6grUM", stackException0.getKeyCode());
      
      stackException0.printStackTrace();
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("", stackException0.getExtendedMessage());
      assertTrue(stackException0.isEmpty());
      assertEquals("N*%paB4K*l\"6grUM", stackException0.getKeyCode());
      
      Collection<Object> collection1 = Severity.getSeverities();
      assertNotNull(collection1);
      assertSame(collection1, collection0);
      
      Collection<Object> collection2 = Severity.getSeverities();
      assertNotNull(collection2);
      assertSame(collection2, collection0);
      assertSame(collection2, collection1);
      
      Severity severity2 = Severity.getSeverity("S_)Izti!-A");
      assertNull(severity2);
      
      int int1 = stackException0.size();
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(0, int1);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("", stackException0.getExtendedMessage());
      assertTrue(stackException0.isEmpty());
      assertEquals("N*%paB4K*l\"6grUM", stackException0.getKeyCode());
      assertTrue(int1 == int0);
      
      boolean boolean0 = stackException0.addAll(collection0);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertSame(collection0, collection2);
      assertSame(collection0, collection1);
      assertTrue(boolean0);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertEquals("N*%paB4K*l\"6grUM", stackException0.getKeyCode());
      
      int int2 = stackException0.size();
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(5, int2);
      assertEquals("ERROR", severity0.toString());
      assertEquals("ERROR", severity0.getName());
      assertEquals(2, severity0.getIntLevel());
      assertEquals("", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertEquals("N*%paB4K*l\"6grUM", stackException0.getKeyCode());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        stackException0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Severity severity0 = Severity.ERROR;
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertNotNull(severity0);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      
      Severity severity1 = Severity.getSeverity("#EEB5e{kfyCJ2O");
      assertNull(severity1);
      
      StackException stackException0 = new StackException("", severity0, "?r2`p,?5xa5R=L$ps");
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertNotNull(stackException0);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      
      Collection<Object> collection0 = Severity.getSeverities();
      assertNotNull(collection0);
      
      Severity severity2 = Severity.getSeverity("");
      assertNull(severity2);
      
      stackException0.printStackTrace();
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      
      boolean boolean0 = stackException0.retainAll(collection0);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertFalse(boolean0);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      
      boolean boolean1 = stackException0.contains("");
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertFalse(boolean1);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertTrue(boolean1 == boolean0);
      
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn(printWriter0, printWriter0, printWriter0, printWriter0, printWriter0).when(printWriter1).append(any(java.lang.CharSequence.class));
      Throwable[] throwableArray0 = stackException0.getSuppressed();
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertNotNull(throwableArray0);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      
      stackException0.printStackTrace(printWriter1);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      
      Iterator<Object> iterator0 = stackException0.iterator();
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertNotNull(iterator0);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertTrue(stackException0.isEmpty());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      
      boolean boolean2 = stackException0.addAll(collection0);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertTrue(boolean2);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Severity severity3 = Severity.getSeverity("W!lJWT");
      assertNull(severity3);
      
      boolean boolean3 = stackException0.contains((Object) null);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertFalse(boolean3);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = stackException0.isEmpty();
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertFalse(boolean4);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      int int0 = stackException0.size();
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(5, int0);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      
      boolean boolean5 = stackException0.add("#EEB5e{kfyCJ2O");
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertTrue(boolean5);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      
      boolean boolean6 = stackException0.removeAll(collection0);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertTrue(boolean6);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      
      int int1 = stackException0.size();
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(1, int1);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = stackException0.toArray();
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertNotNull(objectArray0);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      
      boolean boolean7 = stackException0.containsAll(collection0);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertFalse(boolean7);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      
      boolean boolean8 = stackException0.contains("#EEB5e{kfyCJ2O");
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertTrue(boolean8);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean6);
      assertFalse(boolean8 == boolean3);
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8 == boolean4);
      assertFalse(boolean8 == boolean0);
      assertFalse(boolean8 == boolean1);
      
      int int2 = stackException0.size();
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(1, int2);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean9 = stackException0.contains((Object) null);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertFalse(boolean9);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean4);
      assertTrue(boolean9 == boolean7);
      assertFalse(boolean9 == boolean8);
      assertFalse(boolean9 == boolean5);
      assertFalse(boolean9 == boolean2);
      assertFalse(boolean9 == boolean6);
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean3);
      
      int int3 = stackException0.size();
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(1, int3);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      
      StackException stackException1 = new StackException("org.araguacaima.commons.exception.core.StackException", (Severity) null);
      assertNotNull(stackException1);
      assertTrue(stackException1.isEmpty());
      assertEquals("", stackException1.getExtendedMessage());
      assertEquals("org.araguacaima.commons.exception.core.StackException", stackException1.getKeyCode());
      assertFalse(stackException1.equals((Object)stackException0));
      
      boolean boolean10 = stackException0.add(stackException1);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(3, Severity.WARNING_INT);
      assertNotSame(stackException0, stackException1);
      assertNotSame(stackException1, stackException0);
      assertTrue(boolean10);
      assertEquals(2, severity0.getIntLevel());
      assertEquals("ERROR", severity0.getName());
      assertEquals("ERROR", severity0.toString());
      assertEquals("", stackException0.getKeyCode());
      assertEquals("?r2`p,?5xa5R=L$ps", stackException0.getExtendedMessage());
      assertFalse(stackException0.isEmpty());
      assertTrue(stackException1.isEmpty());
      assertEquals("", stackException1.getExtendedMessage());
      assertEquals("org.araguacaima.commons.exception.core.StackException", stackException1.getKeyCode());
      assertFalse(stackException0.equals((Object)stackException1));
      assertFalse(stackException1.equals((Object)stackException0));
      assertFalse(boolean10 == boolean7);
      assertFalse(boolean10 == boolean9);
      assertTrue(boolean10 == boolean6);
      assertFalse(boolean10 == boolean4);
      assertTrue(boolean10 == boolean8);
      assertFalse(boolean10 == boolean1);
      assertTrue(boolean10 == boolean2);
      assertFalse(boolean10 == boolean0);
      assertTrue(boolean10 == boolean5);
      assertFalse(boolean10 == boolean3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Severity severity0 = Severity.getSeverity("");
      assertNull(severity0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Severity severity0 = Severity.FATAL;
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(severity0);
      assertEquals("FATAL", severity0.toString());
      assertEquals("FATAL", severity0.getName());
      assertEquals(1, severity0.getIntLevel());
      
      StackException stackException0 = new StackException("org.araguacaima.commons.exception.core.GeneralException", severity0, "org.araguacaima.commons.exception.core.GeneralException");
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(stackException0);
      assertEquals("FATAL", severity0.toString());
      assertEquals("FATAL", severity0.getName());
      assertEquals(1, severity0.getIntLevel());
      assertTrue(stackException0.isEmpty());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getKeyCode());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getExtendedMessage());
      
      StackException stackException1 = new StackException("4bs-<:W", severity0);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(stackException1);
      assertEquals("FATAL", severity0.toString());
      assertEquals("FATAL", severity0.getName());
      assertEquals(1, severity0.getIntLevel());
      assertEquals("4bs-<:W", stackException1.getKeyCode());
      assertTrue(stackException1.isEmpty());
      assertEquals("", stackException1.getExtendedMessage());
      assertFalse(stackException1.equals((Object)stackException0));
      
      Collection<Object> collection0 = Severity.getSeverities();
      assertNotNull(collection0);
      
      Object object0 = stackException1.magicValue;
      assertNull(object0);
      
      String string0 = stackException1.getMessage();
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(string0);
      assertNotSame(stackException1, stackException0);
      assertEquals("[[4bs-<:W]]", string0);
      assertEquals("FATAL", severity0.toString());
      assertEquals("FATAL", severity0.getName());
      assertEquals(1, severity0.getIntLevel());
      assertEquals("4bs-<:W", stackException1.getKeyCode());
      assertTrue(stackException1.isEmpty());
      assertEquals("", stackException1.getExtendedMessage());
      assertFalse(stackException1.equals((Object)stackException0));
      
      boolean boolean0 = stackException0.add((Object) null);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotSame(stackException0, stackException1);
      assertTrue(boolean0);
      assertEquals("FATAL", severity0.toString());
      assertEquals("FATAL", severity0.getName());
      assertEquals(1, severity0.getIntLevel());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getKeyCode());
      assertFalse(stackException0.isEmpty());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getExtendedMessage());
      assertFalse(stackException0.equals((Object)stackException1));
      
      int int0 = stackException0.size();
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotSame(stackException0, stackException1);
      assertEquals(1, int0);
      assertEquals("FATAL", severity0.toString());
      assertEquals("FATAL", severity0.getName());
      assertEquals(1, severity0.getIntLevel());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getKeyCode());
      assertFalse(stackException0.isEmpty());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getExtendedMessage());
      assertFalse(stackException0.equals((Object)stackException1));
      
      Object object1 = stackException1.magicValue;
      assertNull(object1);
      
      boolean boolean1 = stackException0.remove((Object) null);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotSame(stackException0, stackException1);
      assertTrue(boolean1);
      assertEquals("FATAL", severity0.toString());
      assertEquals("FATAL", severity0.getName());
      assertEquals(1, severity0.getIntLevel());
      assertTrue(stackException0.isEmpty());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getKeyCode());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getExtendedMessage());
      assertFalse(stackException0.equals((Object)stackException1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = stackException0.retainAll(collection0);
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotSame(stackException0, stackException1);
      assertFalse(boolean2);
      assertEquals("FATAL", severity0.toString());
      assertEquals("FATAL", severity0.getName());
      assertEquals(1, severity0.getIntLevel());
      assertTrue(stackException0.isEmpty());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getKeyCode());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getExtendedMessage());
      assertFalse(stackException0.equals((Object)stackException1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Iterator<Object> iterator0 = stackException0.iterator();
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotNull(iterator0);
      assertNotSame(stackException0, stackException1);
      assertEquals("FATAL", severity0.toString());
      assertEquals("FATAL", severity0.getName());
      assertEquals(1, severity0.getIntLevel());
      assertTrue(stackException0.isEmpty());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getKeyCode());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getExtendedMessage());
      assertFalse(stackException0.equals((Object)stackException1));
      
      boolean boolean3 = stackException0.isEmpty();
      assertEquals(3, Severity.WARNING_INT);
      assertEquals(4, Severity.INFO_INT);
      assertEquals(1, Severity.FATAL_INT);
      assertEquals(5, Severity.DEBUG_INT);
      assertEquals(2, Severity.ERROR_INT);
      assertNotSame(stackException0, stackException1);
      assertTrue(boolean3);
      assertEquals("FATAL", severity0.toString());
      assertEquals("FATAL", severity0.getName());
      assertEquals(1, severity0.getIntLevel());
      assertTrue(stackException0.isEmpty());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getKeyCode());
      assertEquals("org.araguacaima.commons.exception.core.GeneralException", stackException0.getExtendedMessage());
      assertFalse(stackException0.equals((Object)stackException1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Severity severity0 = Severity.WARNING;
      StackException stackException0 = new StackException("", severity0, "");
      stackException0.toArray();
      stackException0.getStackTrace();
      stackException0.iterator();
      Object object0 = stackException0.magicValue;
      stackException0.remove((Object) null);
      stackException0.add(severity0);
      stackException0.isEmpty();
      stackException0.size();
      StackException stackException1 = new StackException("", severity0, "org.araguacaima.commons.exception.core.StackException");
      stackException0.removeAll(stackException1);
      assertTrue(stackException1.isEmpty());
      
      boolean boolean0 = stackException1.addAll(stackException0);
      assertFalse(stackException1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Severity severity0 = Severity.DEBUG;
      StackException stackException0 = new StackException("org.araguacaima.commons.exception.core.ApplicationException", severity0, "org.araguacaima.commons.exception.core.ApplicationException");
      stackException0.remove("org.araguacaima.commons.exception.core.ApplicationException");
      StackException stackException1 = new StackException("", severity0);
      stackException0.addAll(stackException1);
      stackException0.removeAll(stackException1);
      StackException stackException2 = new StackException("", severity0, "");
      boolean boolean0 = stackException0.containsAll(stackException2);
      boolean boolean1 = stackException2.contains(stackException1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Severity severity0 = Severity.INFO;
      StackException stackException0 = new StackException("", severity0);
      stackException0.clear();
      stackException0.setExtendedMessage("");
      Severity.getSeverity("");
      StackException stackException1 = new StackException("qN7n=sO)a%m-A @@ea", severity0, (String) null);
      stackException0.containsAll(stackException1);
      stackException0.addAll(stackException1);
      stackException0.add(stackException1);
      stackException1.containsAll(stackException0);
      Object[] objectArray0 = stackException0.toArray();
      stackException0.removeAll(stackException1);
      stackException0.containsAll(stackException1);
      stackException1.size();
      stackException0.toArray();
      Object[] objectArray1 = stackException0.toArray(objectArray0);
      stackException0.iterator();
      stackException1.toArray(objectArray1);
      assertFalse(stackException0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackException stackException0 = new StackException("yHD?i|pWpPEtGN", (Severity) null);
      stackException0.containsAll((Collection) null);
      Throwable throwable0 = stackException0.fillInStackTrace();
      stackException0.initCause(throwable0);
      stackException0.containsAll((Collection) null);
      stackException0.setExtendedMessage("");
      // Undeclared exception!
      try { 
        stackException0.retainAll((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
