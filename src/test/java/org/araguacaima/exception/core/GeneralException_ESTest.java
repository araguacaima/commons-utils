/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 05 19:22:55 GMT 2017
 */

package org.araguacaima.exception.core;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS = true,
                     useVNET = true,
                     resetStaticState = true,
                     separateClassLoader = true,
                     useJEE = true)
public class GeneralException_ESTest extends GeneralException_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException("8]M-~CyWR.$yv");
        ApplicationException applicationException0 = new ApplicationException("%'Z,F9\"mOF~NL", technicalException0);
        applicationException0.perform();
        assertEquals("", applicationException0.getExtendedMessage());
    }

    @Test(timeout = 4000)
    public void test01()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException("8]M-~CyWR.$yv");
        TechnicalException technicalException1 = new TechnicalException("8]M-~CyWR.$yv", technicalException0);
        assertFalse(technicalException1.equals((Object) technicalException0));
    }

    @Test(timeout = 4000)
    public void test02()
            throws Throwable {
        StackException stackException0 = new StackException("org.araguacaima.exception.core.GeneralException",
                (Severity) null);
        Severity severity0 = stackException0.getSeverity();
        assertNull(severity0);
    }

    @Test(timeout = 4000)
    public void test03()
            throws Throwable {
        Severity severity0 = Severity.ERROR;
        TechnicalException technicalException0 = new TechnicalException("8]M-~CyWR.$yv");
        TechnicalException technicalException1 = new TechnicalException((String) null, severity0, technicalException0);
        String string0 = technicalException1.getKeyCode();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test04()
            throws Throwable {
        Severity severity0 = Severity.FATAL;
        StackException stackException0 = new StackException("", severity0);
        String string0 = stackException0.getKeyCode();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test05()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException((String) null);
        String string0 = technicalException0.getExtendedMessage();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test06()
            throws Throwable {
        Severity severity0 = Severity.FATAL;
        TechnicalException technicalException0 = new TechnicalException("");
        TechnicalException technicalException1 = new TechnicalException("", severity0, technicalException0, "");
        String string0 = technicalException1.getExtendedMessage();
        assertEquals(" [[]]", string0);
    }

    @Test(timeout = 4000)
    public void test07()
            throws Throwable {
        Severity severity0 = Severity.WARNING;
        StackException stackException0 = new StackException("DEBUG", severity0, "");
        assertEquals("DEBUG", stackException0.getKeyCode());
    }

    @Test(timeout = 4000)
    public void test08()
            throws Throwable {
        Severity severity0 = Severity.INFO;
        StackException stackException0 = new StackException("QKSdGY8'i?p4p!T7<_e", severity0, "NOw");
        TechnicalException technicalException0 = new TechnicalException("NOw", stackException0, (String) null);
        assertEquals("", technicalException0.getExtendedMessage());
    }

    @Test(timeout = 4000)
    public void test09()
            throws Throwable {
        Severity severity0 = Severity.INFO;
        Object[] objectArray0 = new Object[0];
        ApplicationException applicationException0 = new ApplicationException("", severity0, objectArray0);
        assertEquals("", applicationException0.getExtendedMessage());
    }

    @Test(timeout = 4000)
    public void test10()
            throws Throwable {
        Severity severity0 = Severity.ERROR;
        StackException stackException0 = new StackException("%'Z,F9\"mOF~NL",
                severity0,
                "org.evosuite.runtime.mock.java.lang.MockThrowable: [[null]] [[8]M-~CyWR.$yv]] [[8]M-~CyWR.$yv]]");
        String string0 = stackException0.getKeyCode();
        assertEquals("%'Z,F9\"mOF~NL", string0);
    }

    @Test(timeout = 4000)
    public void test11()
            throws Throwable {
        Severity severity0 = Severity.WARNING;
        Object object0 = new Object();
        ApplicationException applicationException0 = new ApplicationException((String) null, severity0, object0);
        Object object1 = applicationException0.getMagicValue();
        assertSame(object1, object0);
    }

    @Test(timeout = 4000)
    public void test12()
            throws Throwable {
        Severity severity0 = Severity.FATAL;
        StackException stackException0 = new StackException("", severity0);
        stackException0.setExtendedMessage(">MM");
        assertEquals(">MM", stackException0.getExtendedMessage());
    }

    @Test(timeout = 4000)
    public void test13()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException("8]M-~CyWR.$yv");
        ApplicationException applicationException0 = new ApplicationException("%'Z,F9\"mOF~NL", technicalException0);
        Object object0 = applicationException0.getMagicValue();
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test14()
            throws Throwable {
        Severity severity0 = Severity.WARNING;
        Object object0 = new Object();
        ApplicationException applicationException0 = new ApplicationException((String) null, severity0, object0);
        Severity severity1 = applicationException0.getSeverity();
        assertEquals(2, Severity.ERROR_INT);
    }
}
