/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 08 16:27:26 GMT 2017
 */

package com.araguacaima.commons.exception.core;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.PrintStream;
import java.io.PrintWriter;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.runtime.MockitoExtension.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.any;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS = true,
                     useVNET = true,
                     resetStaticState = true,
                     separateClassLoader = true,
                     useJEE = true)
public class TechnicalException_ESTest extends TechnicalException_ESTest_scaffolding {

    @Test
    public void test00()
            throws Throwable {
        Severity severity0 = Severity.FATAL;
        TechnicalException technicalException0 = new TechnicalException((String) null);
        technicalException0.printStackTrace();
        // Undeclared exception!
        try {
            technicalException0.printStackTrace((PrintStream) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.Writer", e);
        }
    }

    @Test
    public void test01()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException("");
        Severity severity0 = Severity.FATAL;
        technicalException0.severity = severity0;
        technicalException0.printStackTrace();
        Severity.getSeverity("");
        technicalException0.getLocalizedMessage();
        // Undeclared exception!
        try {
            technicalException0.printStackTrace((PrintWriter) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
        }
    }

    @Test
    public void test02()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException("UNKNOWN", (Throwable) null, "vfs");
        PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn((PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null).when(printWriter0).append(any(java.lang.CharSequence.class));
        technicalException0.printStackTrace(printWriter0);
    }

    @Test
    public void test03()
            throws Throwable {
        Severity severity0 = Severity.FATAL;
        TechnicalException technicalException0 = null;
        try {
            technicalException0 = new TechnicalException(
                    "    Probablemente hay inconsistencia entre su package y su path...",
                    severity0,
                    (Throwable) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.exception.core.TechnicalException", e);
        }
    }

    @Test
    public void test04()
            throws Throwable {
        String string0 = "";
        Severity severity0 = Severity.FATAL;
        String string1 = "?+(82>nRdz5UI";
        String string2 = " W@ .:$i'=#MF)t";
        TechnicalException technicalException0 = null;
        try {
            technicalException0 = new TechnicalException(" W@ .:$i'=#MF)t", severity0, (Throwable) null, "");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.exception.core.TechnicalException", e);
        }
    }

    @Test
    public void test05()
            throws Throwable {
        String string0 = "";
        Severity severity0 = Severity.DEBUG;
        TechnicalException technicalException0 = new TechnicalException("I4\"-g", (Throwable) null);
        technicalException0.toString();
        technicalException0.initCause((Throwable) null);
        Exceptions.setBundleName("");
    }

    @Test
    public void test06()
            throws Throwable {
        Severity severity0 = Severity.ERROR;
        assertNotNull(severity0);
        assertEquals(5, Severity.DEBUG_INT);
        assertEquals(1, Severity.FATAL_INT);
        assertEquals(3, Severity.WARNING_INT);
        assertEquals(4, Severity.INFO_INT);
        assertEquals(2, Severity.ERROR_INT);
        assertEquals("ERROR", severity0.toString());
        assertEquals(2, severity0.getIntLevel());
        assertEquals("ERROR", severity0.getName());

        TechnicalException technicalException0 = new TechnicalException("OIS7>~<r4VL 8");
        assertNotNull(technicalException0);
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());

        technicalException0.printStackTrace();
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());

        TechnicalException technicalException1 = new TechnicalException("OIS7>~<r4VL 8", technicalException0);
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertNotNull(technicalException1);
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());

        TechnicalException technicalException2 = new TechnicalException(
                "com.araguacaima.commons.exception.core.TechnicalException",
                severity0,
                technicalException1,
                "OIS7>~<r4VL 8");
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertFalse(technicalException2.equals((Object) technicalException1));
        assertFalse(technicalException2.equals((Object) technicalException0));
        assertNotNull(technicalException2);
        assertEquals(5, Severity.DEBUG_INT);
        assertEquals(1, Severity.FATAL_INT);
        assertEquals(3, Severity.WARNING_INT);
        assertEquals(4, Severity.INFO_INT);
        assertEquals(2, Severity.ERROR_INT);
        assertEquals("ERROR", severity0.toString());
        assertEquals(2, severity0.getIntLevel());
        assertEquals("ERROR", severity0.getName());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());
        assertEquals("com.araguacaima.commons.exception.core.TechnicalException", technicalException2.getKeyCode());
        assertEquals("OIS7>~<r4VL 8 [[exceptions_en_.properties]] [[exceptions_en_.properties]]",
                technicalException2.getExtendedMessage());

        Severity severity1 = Severity.getSeverity("");
        assertNull(severity1);

        Throwable[] throwableArray0 = technicalException2.getSuppressed();
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertFalse(technicalException2.equals((Object) technicalException1));
        assertFalse(technicalException2.equals((Object) technicalException0));
        assertNotSame(technicalException0, technicalException2);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException1, technicalException2);
        assertNotSame(technicalException1, technicalException0);
        assertNotSame(technicalException2, technicalException1);
        assertNotSame(technicalException2, technicalException0);
        assertNotNull(throwableArray0);
        assertEquals(5, Severity.DEBUG_INT);
        assertEquals(1, Severity.FATAL_INT);
        assertEquals(3, Severity.WARNING_INT);
        assertEquals(4, Severity.INFO_INT);
        assertEquals(2, Severity.ERROR_INT);
        assertEquals("ERROR", severity0.toString());
        assertEquals(2, severity0.getIntLevel());
        assertEquals("ERROR", severity0.getName());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());
        assertEquals("com.araguacaima.commons.exception.core.TechnicalException", technicalException2.getKeyCode());
        assertEquals("OIS7>~<r4VL 8 [[exceptions_en_.properties]] [[exceptions_en_.properties]]",
                technicalException2.getExtendedMessage());

        technicalException2.printStackTrace();
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertFalse(technicalException2.equals((Object) technicalException1));
        assertFalse(technicalException2.equals((Object) technicalException0));
        assertNotSame(technicalException0, technicalException2);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException1, technicalException2);
        assertNotSame(technicalException1, technicalException0);
        assertNotSame(technicalException2, technicalException1);
        assertNotSame(technicalException2, technicalException0);
        assertEquals(5, Severity.DEBUG_INT);
        assertEquals(1, Severity.FATAL_INT);
        assertEquals(3, Severity.WARNING_INT);
        assertEquals(4, Severity.INFO_INT);
        assertEquals(2, Severity.ERROR_INT);
        assertEquals("ERROR", severity0.toString());
        assertEquals(2, severity0.getIntLevel());
        assertEquals("ERROR", severity0.getName());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());
        assertEquals("com.araguacaima.commons.exception.core.TechnicalException", technicalException2.getKeyCode());
        assertEquals("OIS7>~<r4VL 8 [[exceptions_en_.properties]] [[exceptions_en_.properties]]",
                technicalException2.getExtendedMessage());

        TechnicalException technicalException3 = (TechnicalException) technicalException2.getOriginalException();
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertFalse(technicalException2.equals((Object) technicalException1));
        assertFalse(technicalException2.equals((Object) technicalException0));
        assertFalse(technicalException3.equals((Object) technicalException2));
        assertFalse(technicalException3.equals((Object) technicalException0));
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException2);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException1, technicalException2);
        assertSame(technicalException1, technicalException3);
        assertNotSame(technicalException1, technicalException0);
        assertNotSame(technicalException2, technicalException3);
        assertNotSame(technicalException2, technicalException1);
        assertNotSame(technicalException2, technicalException0);
        assertSame(technicalException3, technicalException1);
        assertNotSame(technicalException3, technicalException2);
        assertNotSame(technicalException3, technicalException0);
        assertNotNull(technicalException3);
        assertEquals(5, Severity.DEBUG_INT);
        assertEquals(1, Severity.FATAL_INT);
        assertEquals(3, Severity.WARNING_INT);
        assertEquals(4, Severity.INFO_INT);
        assertEquals(2, Severity.ERROR_INT);
        assertEquals("ERROR", severity0.toString());
        assertEquals(2, severity0.getIntLevel());
        assertEquals("ERROR", severity0.getName());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());
        assertEquals("com.araguacaima.commons.exception.core.TechnicalException", technicalException2.getKeyCode());
        assertEquals("OIS7>~<r4VL 8 [[exceptions_en_.properties]] [[exceptions_en_.properties]]",
                technicalException2.getExtendedMessage());
        assertEquals("[[exceptions_en_.properties]]", technicalException3.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException3.getKeyCode());

        PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn(printWriter0, printWriter0, printWriter0, printWriter0, printWriter0).when(printWriter1).append(any(
                java.lang.CharSequence.class));
        technicalException1.printStackTrace(printWriter1);
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException2);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException1, technicalException2);
        assertSame(technicalException1, technicalException3);
        assertNotSame(technicalException1, technicalException0);
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());

        TechnicalException technicalException4 = (TechnicalException) technicalException1.getOriginalException();
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertFalse(technicalException4.equals((Object) technicalException3));
        assertFalse(technicalException4.equals((Object) technicalException2));
        assertFalse(technicalException4.equals((Object) technicalException1));
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException1, technicalException2);
        assertSame(technicalException1, technicalException3);
        assertNotSame(technicalException1, technicalException4);
        assertNotSame(technicalException1, technicalException0);
        assertSame(technicalException4, technicalException0);
        assertNotSame(technicalException4, technicalException3);
        assertNotSame(technicalException4, technicalException2);
        assertNotSame(technicalException4, technicalException1);
        assertNotNull(technicalException4);
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException4.getKeyCode());
        assertEquals("", technicalException4.getExtendedMessage());

        TechnicalException technicalException5 = (TechnicalException) technicalException2.getOriginalException();
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException4));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertFalse(technicalException2.equals((Object) technicalException3));
        assertFalse(technicalException2.equals((Object) technicalException1));
        assertFalse(technicalException2.equals((Object) technicalException4));
        assertFalse(technicalException2.equals((Object) technicalException0));
        assertFalse(technicalException5.equals((Object) technicalException4));
        assertFalse(technicalException5.equals((Object) technicalException0));
        assertFalse(technicalException5.equals((Object) technicalException2));
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException1, technicalException2);
        assertSame(technicalException1, technicalException3);
        assertSame(technicalException1, technicalException5);
        assertNotSame(technicalException1, technicalException4);
        assertNotSame(technicalException1, technicalException0);
        assertNotSame(technicalException2, technicalException5);
        assertNotSame(technicalException2, technicalException3);
        assertNotSame(technicalException2, technicalException1);
        assertNotSame(technicalException2, technicalException4);
        assertNotSame(technicalException2, technicalException0);
        assertNotSame(technicalException5, technicalException4);
        assertSame(technicalException5, technicalException1);
        assertSame(technicalException5, technicalException3);
        assertNotSame(technicalException5, technicalException0);
        assertNotSame(technicalException5, technicalException2);
        assertNotNull(technicalException5);
        assertEquals(5, Severity.DEBUG_INT);
        assertEquals(1, Severity.FATAL_INT);
        assertEquals(3, Severity.WARNING_INT);
        assertEquals(4, Severity.INFO_INT);
        assertEquals(2, Severity.ERROR_INT);
        assertEquals("ERROR", severity0.toString());
        assertEquals(2, severity0.getIntLevel());
        assertEquals("ERROR", severity0.getName());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());
        assertEquals("com.araguacaima.commons.exception.core.TechnicalException", technicalException2.getKeyCode());
        assertEquals("OIS7>~<r4VL 8 [[exceptions_en_.properties]] [[exceptions_en_.properties]]",
                technicalException2.getExtendedMessage());
        assertEquals("[[exceptions_en_.properties]]", technicalException5.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException5.getKeyCode());

        technicalException1.printStackTrace();
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException4));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException1, technicalException2);
        assertSame(technicalException1, technicalException3);
        assertSame(technicalException1, technicalException5);
        assertNotSame(technicalException1, technicalException4);
        assertNotSame(technicalException1, technicalException0);
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());

        technicalException1.addSuppressed(technicalException0);
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException4));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException1, technicalException2);
        assertSame(technicalException1, technicalException3);
        assertSame(technicalException1, technicalException5);
        assertNotSame(technicalException1, technicalException4);
        assertNotSame(technicalException1, technicalException0);
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());

        MockThrowable mockThrowable0 = (MockThrowable) technicalException0.getOriginalException();
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException1);
        assertNotNull(mockThrowable0);
        assertNull(mockThrowable0.getMessage());
        assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());

        MockThrowable mockThrowable1 = (MockThrowable) technicalException0.getOriginalException();
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertSame(mockThrowable1, mockThrowable0);
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException1);
        assertNotNull(mockThrowable1);
        assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.toString());
        assertNull(mockThrowable1.getMessage());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());

        TechnicalException technicalException6 = (TechnicalException) technicalException2.getOriginalException();
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException6.equals((Object) technicalException2));
        assertFalse(technicalException6.equals((Object) technicalException4));
        assertFalse(technicalException6.equals((Object) technicalException0));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException4));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertFalse(technicalException2.equals((Object) technicalException5));
        assertFalse(technicalException2.equals((Object) technicalException3));
        assertFalse(technicalException2.equals((Object) technicalException1));
        assertFalse(technicalException2.equals((Object) technicalException4));
        assertFalse(technicalException2.equals((Object) technicalException0));
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException0, technicalException6);
        assertSame(technicalException6, technicalException1);
        assertNotSame(technicalException6, technicalException2);
        assertSame(technicalException6, technicalException5);
        assertSame(technicalException6, technicalException3);
        assertNotSame(technicalException6, technicalException4);
        assertNotSame(technicalException6, technicalException0);
        assertNotSame(technicalException1, technicalException2);
        assertSame(technicalException1, technicalException3);
        assertSame(technicalException1, technicalException5);
        assertSame(technicalException1, technicalException6);
        assertNotSame(technicalException1, technicalException4);
        assertNotSame(technicalException1, technicalException0);
        assertNotSame(technicalException2, technicalException5);
        assertNotSame(technicalException2, technicalException3);
        assertNotSame(technicalException2, technicalException6);
        assertNotSame(technicalException2, technicalException1);
        assertNotSame(technicalException2, technicalException4);
        assertNotSame(technicalException2, technicalException0);
        assertNotNull(technicalException6);
        assertEquals(5, Severity.DEBUG_INT);
        assertEquals(1, Severity.FATAL_INT);
        assertEquals(3, Severity.WARNING_INT);
        assertEquals(4, Severity.INFO_INT);
        assertEquals(2, Severity.ERROR_INT);
        assertEquals("ERROR", severity0.toString());
        assertEquals(2, severity0.getIntLevel());
        assertEquals("ERROR", severity0.getName());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException6.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException6.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());
        assertEquals("com.araguacaima.commons.exception.core.TechnicalException", technicalException2.getKeyCode());
        assertEquals("OIS7>~<r4VL 8 [[exceptions_en_.properties]] [[exceptions_en_.properties]]",
                technicalException2.getExtendedMessage());

        TechnicalException technicalException7 = (TechnicalException) technicalException1.getOriginalException();
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException0.equals((Object) technicalException6));
        assertFalse(technicalException7.equals((Object) technicalException1));
        assertFalse(technicalException7.equals((Object) technicalException2));
        assertFalse(technicalException7.equals((Object) technicalException3));
        assertFalse(technicalException7.equals((Object) technicalException5));
        assertFalse(technicalException7.equals((Object) technicalException6));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException4));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException0, technicalException6);
        assertSame(technicalException0, technicalException7);
        assertNotSame(technicalException7, technicalException1);
        assertNotSame(technicalException7, technicalException2);
        assertSame(technicalException7, technicalException4);
        assertSame(technicalException7, technicalException0);
        assertNotSame(technicalException7, technicalException3);
        assertNotSame(technicalException7, technicalException5);
        assertNotSame(technicalException7, technicalException6);
        assertNotSame(technicalException1, technicalException2);
        assertNotSame(technicalException1, technicalException7);
        assertSame(technicalException1, technicalException3);
        assertSame(technicalException1, technicalException5);
        assertSame(technicalException1, technicalException6);
        assertNotSame(technicalException1, technicalException4);
        assertNotSame(technicalException1, technicalException0);
        assertNotNull(technicalException7);
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("", technicalException7.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException7.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());

        PrintWriter printWriter2 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        PrintWriter printWriter3 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn(printWriter2, printWriter2, printWriter2, printWriter2, printWriter2).when(printWriter3).append(any(
                java.lang.CharSequence.class));
        TechnicalException technicalException8 = new TechnicalException(
                "com.araguacaima.commons.exception.core.TechnicalException",
                mockThrowable0,
                "UNKNOWN");
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException0.equals((Object) technicalException6));
        assertFalse(technicalException8.equals((Object) technicalException0));
        assertFalse(technicalException8.equals((Object) technicalException2));
        assertFalse(technicalException8.equals((Object) technicalException1));
        assertFalse(technicalException8.equals((Object) technicalException4));
        assertFalse(technicalException8.equals((Object) technicalException7));
        assertFalse(technicalException8.equals((Object) technicalException6));
        assertFalse(technicalException8.equals((Object) technicalException3));
        assertFalse(technicalException8.equals((Object) technicalException5));
        assertNotNull(technicalException8);
        assertNull(mockThrowable0.getMessage());
        assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("UNKNOWN", technicalException8.getExtendedMessage());
        assertEquals("com.araguacaima.commons.exception.core.TechnicalException", technicalException8.getKeyCode());

        MockThrowable mockThrowable2 = (MockThrowable) technicalException1.initCause(technicalException8);
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException8));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException0.equals((Object) technicalException6));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException7));
        assertFalse(technicalException1.equals((Object) technicalException4));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertFalse(technicalException1.equals((Object) technicalException8));
        assertFalse(technicalException8.equals((Object) technicalException0));
        assertFalse(technicalException8.equals((Object) technicalException2));
        assertFalse(technicalException8.equals((Object) technicalException1));
        assertFalse(technicalException8.equals((Object) technicalException4));
        assertFalse(technicalException8.equals((Object) technicalException7));
        assertFalse(technicalException8.equals((Object) technicalException6));
        assertFalse(technicalException8.equals((Object) technicalException3));
        assertFalse(technicalException8.equals((Object) technicalException5));
        assertFalse(mockThrowable2.equals((Object) mockThrowable1));
        assertFalse(mockThrowable2.equals((Object) mockThrowable0));
        assertNotSame(mockThrowable0, mockThrowable2);
        assertSame(mockThrowable0, mockThrowable1);
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException8);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException0, technicalException6);
        assertSame(technicalException0, technicalException7);
        assertNotSame(technicalException1, technicalException2);
        assertNotSame(technicalException1, technicalException7);
        assertSame(technicalException1, technicalException3);
        assertSame(technicalException1, technicalException5);
        assertSame(technicalException1, technicalException6);
        assertNotSame(technicalException1, technicalException4);
        assertNotSame(technicalException1, technicalException0);
        assertNotSame(technicalException1, technicalException8);
        assertNotSame(technicalException8, technicalException0);
        assertNotSame(technicalException8, technicalException2);
        assertNotSame(technicalException8, technicalException1);
        assertNotSame(technicalException8, technicalException4);
        assertNotSame(technicalException8, technicalException7);
        assertNotSame(technicalException8, technicalException6);
        assertNotSame(technicalException8, technicalException3);
        assertNotSame(technicalException8, technicalException5);
        assertNotSame(mockThrowable2, mockThrowable1);
        assertNotSame(mockThrowable2, mockThrowable0);
        assertNotNull(mockThrowable2);
        assertNull(mockThrowable0.getMessage());
        assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());
        assertEquals("UNKNOWN", technicalException8.getExtendedMessage());
        assertEquals("com.araguacaima.commons.exception.core.TechnicalException", technicalException8.getKeyCode());
        assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: [[exceptions_en_.properties]] " +
                        "[[exceptions_en_" + ".properties]]",
                mockThrowable2.toString());
        assertEquals("[[exceptions_en_.properties]] [[exceptions_en_.properties]]", mockThrowable2.getMessage());

        technicalException0.printStackTrace(printWriter3);
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException8));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException0.equals((Object) technicalException6));
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException8);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException0, technicalException6);
        assertSame(technicalException0, technicalException7);
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());

        technicalException2.printStackTrace();
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException8));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException0.equals((Object) technicalException6));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException7));
        assertFalse(technicalException1.equals((Object) technicalException4));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertFalse(technicalException1.equals((Object) technicalException8));
        assertFalse(technicalException2.equals((Object) technicalException5));
        assertFalse(technicalException2.equals((Object) technicalException3));
        assertFalse(technicalException2.equals((Object) technicalException6));
        assertFalse(technicalException2.equals((Object) technicalException8));
        assertFalse(technicalException2.equals((Object) technicalException1));
        assertFalse(technicalException2.equals((Object) technicalException4));
        assertFalse(technicalException2.equals((Object) technicalException0));
        assertFalse(technicalException2.equals((Object) technicalException7));
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException8);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException0, technicalException6);
        assertSame(technicalException0, technicalException7);
        assertNotSame(technicalException1, technicalException2);
        assertNotSame(technicalException1, technicalException7);
        assertSame(technicalException1, technicalException3);
        assertSame(technicalException1, technicalException5);
        assertSame(technicalException1, technicalException6);
        assertNotSame(technicalException1, technicalException4);
        assertNotSame(technicalException1, technicalException0);
        assertNotSame(technicalException1, technicalException8);
        assertNotSame(technicalException2, technicalException5);
        assertNotSame(technicalException2, technicalException3);
        assertNotSame(technicalException2, technicalException6);
        assertNotSame(technicalException2, technicalException8);
        assertNotSame(technicalException2, technicalException1);
        assertNotSame(technicalException2, technicalException4);
        assertNotSame(technicalException2, technicalException0);
        assertNotSame(technicalException2, technicalException7);
        assertEquals(5, Severity.DEBUG_INT);
        assertEquals(1, Severity.FATAL_INT);
        assertEquals(3, Severity.WARNING_INT);
        assertEquals(4, Severity.INFO_INT);
        assertEquals(2, Severity.ERROR_INT);
        assertEquals("ERROR", severity0.toString());
        assertEquals(2, severity0.getIntLevel());
        assertEquals("ERROR", severity0.getName());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());
        assertEquals("com.araguacaima.commons.exception.core.TechnicalException", technicalException2.getKeyCode());
        assertEquals("OIS7>~<r4VL 8 [[exceptions_en_.properties]] [[exceptions_en_.properties]]",
                technicalException2.getExtendedMessage());

        TechnicalException technicalException9 = (TechnicalException) technicalException1.getOriginalException();
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException8));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException0.equals((Object) technicalException6));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException7));
        assertFalse(technicalException1.equals((Object) technicalException4));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertFalse(technicalException1.equals((Object) technicalException8));
        assertFalse(technicalException9.equals((Object) technicalException3));
        assertFalse(technicalException9.equals((Object) technicalException5));
        assertFalse(technicalException9.equals((Object) technicalException6));
        assertFalse(technicalException9.equals((Object) technicalException8));
        assertFalse(technicalException9.equals((Object) technicalException2));
        assertFalse(technicalException9.equals((Object) technicalException1));
        assertSame(technicalException0, technicalException9);
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException8);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException0, technicalException6);
        assertSame(technicalException0, technicalException7);
        assertNotSame(technicalException1, technicalException2);
        assertNotSame(technicalException1, technicalException9);
        assertNotSame(technicalException1, technicalException7);
        assertSame(technicalException1, technicalException3);
        assertSame(technicalException1, technicalException5);
        assertSame(technicalException1, technicalException6);
        assertNotSame(technicalException1, technicalException4);
        assertNotSame(technicalException1, technicalException0);
        assertNotSame(technicalException1, technicalException8);
        assertSame(technicalException9, technicalException7);
        assertNotSame(technicalException9, technicalException3);
        assertNotSame(technicalException9, technicalException5);
        assertNotSame(technicalException9, technicalException6);
        assertNotSame(technicalException9, technicalException8);
        assertSame(technicalException9, technicalException0);
        assertNotSame(technicalException9, technicalException2);
        assertSame(technicalException9, technicalException4);
        assertNotSame(technicalException9, technicalException1);
        assertNotNull(technicalException9);
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException9.getKeyCode());
        assertEquals("", technicalException9.getExtendedMessage());

        technicalException0.printStackTrace();
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException8));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException0.equals((Object) technicalException6));
        assertSame(technicalException0, technicalException9);
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException8);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException0, technicalException6);
        assertSame(technicalException0, technicalException7);
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());

        technicalException2.printStackTrace();
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException8));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException0.equals((Object) technicalException6));
        assertFalse(technicalException1.equals((Object) technicalException2));
        assertFalse(technicalException1.equals((Object) technicalException9));
        assertFalse(technicalException1.equals((Object) technicalException7));
        assertFalse(technicalException1.equals((Object) technicalException4));
        assertFalse(technicalException1.equals((Object) technicalException0));
        assertFalse(technicalException1.equals((Object) technicalException8));
        assertFalse(technicalException2.equals((Object) technicalException5));
        assertFalse(technicalException2.equals((Object) technicalException3));
        assertFalse(technicalException2.equals((Object) technicalException6));
        assertFalse(technicalException2.equals((Object) technicalException8));
        assertFalse(technicalException2.equals((Object) technicalException1));
        assertFalse(technicalException2.equals((Object) technicalException4));
        assertFalse(technicalException2.equals((Object) technicalException0));
        assertFalse(technicalException2.equals((Object) technicalException9));
        assertFalse(technicalException2.equals((Object) technicalException7));
        assertSame(technicalException0, technicalException9);
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException8);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException0, technicalException6);
        assertSame(technicalException0, technicalException7);
        assertNotSame(technicalException1, technicalException2);
        assertNotSame(technicalException1, technicalException9);
        assertNotSame(technicalException1, technicalException7);
        assertSame(technicalException1, technicalException3);
        assertSame(technicalException1, technicalException5);
        assertSame(technicalException1, technicalException6);
        assertNotSame(technicalException1, technicalException4);
        assertNotSame(technicalException1, technicalException0);
        assertNotSame(technicalException1, technicalException8);
        assertNotSame(technicalException2, technicalException5);
        assertNotSame(technicalException2, technicalException3);
        assertNotSame(technicalException2, technicalException6);
        assertNotSame(technicalException2, technicalException8);
        assertNotSame(technicalException2, technicalException1);
        assertNotSame(technicalException2, technicalException4);
        assertNotSame(technicalException2, technicalException0);
        assertNotSame(technicalException2, technicalException9);
        assertNotSame(technicalException2, technicalException7);
        assertEquals(5, Severity.DEBUG_INT);
        assertEquals(1, Severity.FATAL_INT);
        assertEquals(3, Severity.WARNING_INT);
        assertEquals(4, Severity.INFO_INT);
        assertEquals(2, Severity.ERROR_INT);
        assertEquals("ERROR", severity0.toString());
        assertEquals(2, severity0.getIntLevel());
        assertEquals("ERROR", severity0.getName());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
        assertEquals("OIS7>~<r4VL 8", technicalException1.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());
        assertEquals("com.araguacaima.commons.exception.core.TechnicalException", technicalException2.getKeyCode());
        assertEquals("OIS7>~<r4VL 8 [[exceptions_en_.properties]] [[exceptions_en_.properties]]",
                technicalException2.getExtendedMessage());

        PrintWriter printWriter4 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        PrintWriter printWriter5 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn(printWriter4, printWriter4, printWriter4, printWriter4, printWriter4).when(printWriter5).append(any(
                java.lang.CharSequence.class));
        technicalException0.printStackTrace(printWriter5);
        assertFalse(technicalException0.equals((Object) technicalException3));
        assertFalse(technicalException0.equals((Object) technicalException5));
        assertFalse(technicalException0.equals((Object) technicalException2));
        assertFalse(technicalException0.equals((Object) technicalException8));
        assertFalse(technicalException0.equals((Object) technicalException1));
        assertFalse(technicalException0.equals((Object) technicalException6));
        assertSame(technicalException0, technicalException9);
        assertNotSame(technicalException0, technicalException3);
        assertNotSame(technicalException0, technicalException5);
        assertNotSame(technicalException0, technicalException2);
        assertSame(technicalException0, technicalException4);
        assertNotSame(technicalException0, technicalException8);
        assertNotSame(technicalException0, technicalException1);
        assertNotSame(technicalException0, technicalException6);
        assertSame(technicalException0, technicalException7);
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("OIS7>~<r4VL 8", technicalException0.getKeyCode());
    }

    @Test
    public void test07()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException("");
        assertNotNull(technicalException0);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());

        PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn((PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null).when(printWriter0).append(any(java.lang.CharSequence.class));
        technicalException0.printStackTrace(printWriter0);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());

        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException0.printStackTrace(printStream0);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());

        Throwable throwable0 = technicalException0.getOriginalException();
        assertNotNull(throwable0);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());
        assertNull(throwable0.getMessage());
        assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());

        Throwable throwable1 = technicalException0.getOriginalException();
        assertSame(throwable1, throwable0);
        assertNotNull(throwable1);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable1.toString());
        assertNull(throwable1.getMessage());

        Throwable throwable2 = technicalException0.getOriginalException();
        assertSame(throwable2, throwable0);
        assertSame(throwable2, throwable1);
        assertNotNull(throwable2);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());
        assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable2.toString());
        assertNull(throwable2.getMessage());

        PrintStream printStream1 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException0.printStackTrace(printStream1);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());

        StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
        StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 0);
        assertNotNull(stackTraceElement0);
        assertEquals(".(:0)", stackTraceElement0.toString());
        assertFalse(stackTraceElement0.isNativeMethod());
        assertEquals("", stackTraceElement0.getFileName());
        assertEquals("", stackTraceElement0.getMethodName());
        assertEquals(0, stackTraceElement0.getLineNumber());
        assertEquals("", stackTraceElement0.getClassName());

        stackTraceElementArray0[0] = stackTraceElement0;
        StackTraceElement stackTraceElement1 = new StackTraceElement("", "j!bp.n=0lF*R1gk5w", "", 4549);
        assertFalse(stackTraceElement1.equals((Object) stackTraceElement0));
        assertNotNull(stackTraceElement1);
        assertEquals(".j!bp.n=0lF*R1gk5w(:4549)", stackTraceElement1.toString());
        assertEquals("", stackTraceElement1.getClassName());
        assertEquals(4549, stackTraceElement1.getLineNumber());
        assertEquals("", stackTraceElement1.getFileName());
        assertFalse(stackTraceElement1.isNativeMethod());
        assertEquals("j!bp.n=0lF*R1gk5w", stackTraceElement1.getMethodName());

        stackTraceElementArray0[1] = stackTraceElement1;
        StackTraceElement stackTraceElement2 = new StackTraceElement(
                "com.araguacaima.commons.exception.core.TechnicalException",
                "",
                "",
                (-933));
        assertFalse(stackTraceElement2.equals((Object) stackTraceElement1));
        assertFalse(stackTraceElement2.equals((Object) stackTraceElement0));
        assertNotNull(stackTraceElement2);
        assertEquals("", stackTraceElement2.getFileName());
        assertEquals("", stackTraceElement2.getMethodName());
        assertEquals("com.araguacaima.commons.exception.core.TechnicalException.()", stackTraceElement2.toString());
        assertEquals((-933), stackTraceElement2.getLineNumber());
        assertFalse(stackTraceElement2.isNativeMethod());
        assertEquals("com.araguacaima.commons.exception.core.TechnicalException", stackTraceElement2.getClassName());

        stackTraceElementArray0[2] = stackTraceElement2;
        StackTraceElement stackTraceElement3 = new StackTraceElement("W?#QZR)P?H&2!k'", "", "UNKNOWN", (-933));
        assertFalse(stackTraceElement3.equals((Object) stackTraceElement1));
        assertFalse(stackTraceElement3.equals((Object) stackTraceElement2));
        assertFalse(stackTraceElement3.equals((Object) stackTraceElement0));
        assertNotNull(stackTraceElement3);
        assertEquals("UNKNOWN", stackTraceElement3.getFileName());
        assertEquals("W?#QZR)P?H&2!k'", stackTraceElement3.getClassName());
        assertFalse(stackTraceElement3.isNativeMethod());
        assertEquals((-933), stackTraceElement3.getLineNumber());
        assertEquals("", stackTraceElement3.getMethodName());
        assertEquals("W?#QZR)P?H&2!k'.(UNKNOWN)", stackTraceElement3.toString());

        stackTraceElementArray0[3] = stackTraceElement3;
        StackTraceElement stackTraceElement4 = new StackTraceElement("2*g", "UNKNOWN", "", 4549);
        assertFalse(stackTraceElement4.equals((Object) stackTraceElement1));
        assertFalse(stackTraceElement4.equals((Object) stackTraceElement2));
        assertFalse(stackTraceElement4.equals((Object) stackTraceElement0));
        assertFalse(stackTraceElement4.equals((Object) stackTraceElement3));
        assertNotNull(stackTraceElement4);
        assertEquals("2*g", stackTraceElement4.getClassName());
        assertFalse(stackTraceElement4.isNativeMethod());
        assertEquals(4549, stackTraceElement4.getLineNumber());
        assertEquals("2*g.UNKNOWN(:4549)", stackTraceElement4.toString());
        assertEquals("", stackTraceElement4.getFileName());
        assertEquals("UNKNOWN", stackTraceElement4.getMethodName());

        stackTraceElementArray0[4] = stackTraceElement4;
        StackTraceElement stackTraceElement5 = new StackTraceElement("UNKNOWN", "2*g", "a ", 0);
        assertFalse(stackTraceElement5.equals((Object) stackTraceElement1));
        assertFalse(stackTraceElement5.equals((Object) stackTraceElement3));
        assertFalse(stackTraceElement5.equals((Object) stackTraceElement0));
        assertFalse(stackTraceElement5.equals((Object) stackTraceElement2));
        assertFalse(stackTraceElement5.equals((Object) stackTraceElement4));
        assertNotNull(stackTraceElement5);
        assertEquals("UNKNOWN.2*g(a :0)", stackTraceElement5.toString());
        assertEquals(0, stackTraceElement5.getLineNumber());
        assertFalse(stackTraceElement5.isNativeMethod());
        assertEquals("a ", stackTraceElement5.getFileName());
        assertEquals("UNKNOWN", stackTraceElement5.getClassName());
        assertEquals("2*g", stackTraceElement5.getMethodName());

        stackTraceElementArray0[5] = stackTraceElement5;
        StackTraceElement stackTraceElement6 = new StackTraceElement("j!bp.n=0lF*R1gk5w",
                "W?#QZR)P?H&2!k'",
                "2*g",
                (-2896));
        assertFalse(stackTraceElement6.equals((Object) stackTraceElement5));
        assertFalse(stackTraceElement6.equals((Object) stackTraceElement0));
        assertFalse(stackTraceElement6.equals((Object) stackTraceElement2));
        assertFalse(stackTraceElement6.equals((Object) stackTraceElement1));
        assertFalse(stackTraceElement6.equals((Object) stackTraceElement4));
        assertFalse(stackTraceElement6.equals((Object) stackTraceElement3));
        assertNotNull(stackTraceElement6);
        assertEquals((-2896), stackTraceElement6.getLineNumber());
        assertEquals("j!bp.n=0lF*R1gk5w.W?#QZR)P?H&2!k'(2*g)", stackTraceElement6.toString());
        assertEquals("W?#QZR)P?H&2!k'", stackTraceElement6.getMethodName());
        assertFalse(stackTraceElement6.isNativeMethod());
        assertEquals("j!bp.n=0lF*R1gk5w", stackTraceElement6.getClassName());
        assertEquals("2*g", stackTraceElement6.getFileName());

        stackTraceElementArray0[6] = stackTraceElement6;
        technicalException0.setStackTrace(stackTraceElementArray0);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());

        technicalException0.printStackTrace();
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());

        PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn((PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null).when(printWriter1).append(any(java.lang.CharSequence.class));
        technicalException0.printStackTrace(printWriter1);
        assertEquals("", technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());
    }

    @Test
    public void test08()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException("'.  No data will be ",
                (Throwable) null,
                "Vb_Wpl%\"V\"");
        technicalException0.initCause((Throwable) null);
        technicalException0.printStackTrace();
        technicalException0.getOriginalException();
        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        Exceptions.setBundleName("Vb_Wpl%\"V\"");
    }

    @Test
    public void test09()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException("");
        TechnicalException technicalException1 = new TechnicalException("PvM4", technicalException0, "PvM4");
        assertEquals("PvM4", technicalException1.getKeyCode());
    }

    @Test
    public void test10()
            throws Throwable {
        Severity severity0 = Severity.DEBUG;
        TechnicalException technicalException0 = new TechnicalException("GM:i)$ioC(,Q@@G;+");
        TechnicalException technicalException1 = new TechnicalException("*R<~=<;m*2/M3ZK#,*",
                severity0,
                technicalException0,
                "");
        Severity.getSeverities();
        TechnicalException technicalException2 = new TechnicalException("", technicalException1);
        Severity.getSeverity("GM:i)$ioC(,Q@@G;+");
        Severity.getSeverity("jLI*q@A3o3c!)Ro$Lp]");
        Severity.getSeverities();
        TechnicalException technicalException3 = new TechnicalException("*R<~=<;m*2/M3ZK#,*",
                technicalException2,
                "OT+P=)3s\"j:");
        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException3.printStackTrace(printStream0);
        technicalException2.printStackTrace();
        technicalException3.getCause();
        PrintStream printStream1 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException1.getCause();
        technicalException3.printStackTrace(printStream1);
        technicalException3.printStackTrace();
        PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn((PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null).when(printWriter0).append(any(java.lang.CharSequence.class));
        technicalException1.printStackTrace(printWriter0);
        assertEquals("*R<~=<;m*2/M3ZK#,*", technicalException1.getKeyCode());
    }

    @Test
    public void test11()
            throws Throwable {
        Severity severity0 = Severity.ERROR;
        TechnicalException technicalException0 = new TechnicalException(".");
        TechnicalException technicalException1 = new TechnicalException("UNKNOWN",
                severity0,
                technicalException0,
                "QzM(MEj.u$)ec");
        TechnicalException technicalException2 = new TechnicalException("UNKNOWN", severity0, technicalException1);
        assertFalse(technicalException2.equals((Object) technicalException0));
    }

    @Test
    public void test12()
            throws Throwable {
        TechnicalException technicalException0 = new TechnicalException("", (Throwable) null, " ");
        TechnicalException technicalException1 = new TechnicalException(">8:oP", technicalException0);
        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException1.printStackTrace(printStream0);
        assertFalse(technicalException1.equals((Object) technicalException0));
    }
}
