/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 08 16:28:19 GMT 2017
 */

package com.araguacaima.commons.exception.core;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Collection;
import java.util.Iterator;
import java.util.function.Consumer;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.runtime.MockitoExtension.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.any;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS = true,
                     useVNET = true,
                     resetStaticState = true,
                     separateClassLoader = true,
                     useJEE = true)
public class GeneralException_ESTest extends GeneralException_ESTest_scaffolding {

    @Test
    public void test0()
            throws Throwable {
        Severity severity0 = Severity.DEBUG;
        Severity.getSeverities();
        Severity.getSeverities();
        StackException stackException0 = new StackException((String) null, severity0);
        Severity.getSeverities();
        stackException0.size();
        stackException0.getKeyCode();
        stackException0.toArray();
        stackException0.spliterator();
        TechnicalException technicalException0 = new TechnicalException((String) null,
                severity0,
                stackException0,
                (String) null);
        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        PrintStream printStream1 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        doReturn((PrintStream) null,
                (PrintStream) null,
                (PrintStream) null,
                (PrintStream) null,
                (PrintStream) null).when(printStream1).append(any(java.lang.CharSequence.class));
        stackException0.printStackTrace(printStream1);
        Severity.getSeverities();
        technicalException0.printStackTrace(printStream0);
        technicalException0.getSeverity();
        stackException0.getExtendedMessage();
        StackException stackException1 = new StackException((String) null, severity0, (String) null);
        boolean boolean0 = stackException0.retainAll(stackException1);
        assertFalse(boolean0);
    }

    @Test
    public void test1()
            throws Throwable {
        Severity severity0 = Severity.ERROR;
        StackException stackException0 = new StackException("", severity0);
        Severity.getSeverity("added from this file.");
        StackException stackException1 = new StackException((String) null, severity0, "");
        stackException0.retainAll(stackException1);
        stackException1.contains((Object) null);
        stackException0.removeAll(stackException1);
        Severity severity1 = stackException0.getSeverity();
        Severity.getSeverities();
        stackException1.toArray();
        stackException1.getMagicValue();
        stackException0.contains(severity1);
        stackException0.getSeverity();
        stackException1.getSeverity();
        stackException1.iterator();
        stackException0.getMagicValue();
        stackException0.setExtendedMessage("Error reading file '");
        String string0 = stackException0.getKeyCode();
        assertEquals("", string0);
    }

    @Test
    public void test2()
            throws Throwable {
        Severity severity0 = Severity.DEBUG;
        StackException stackException0 = new StackException("^|rMoI(0l*Q,?t", severity0);
        StackException stackException1 = new StackException("c|~wlI~Kv", severity0);
        stackException0.removeAll(stackException1);
        stackException0.iterator();
        stackException0.magicValue = (Object) "^|rMoI(0l*Q,?t";
        Collection collection0 = Severity.getSeverities();
        Collection collection1 = Severity.getSeverities();
        stackException0.contains((Object) null);
        stackException0.getSeverity();
        stackException0.isEmpty();
        stackException0.containsAll(collection0);
        stackException0.contains(collection0);
        stackException0.toArray();
        TechnicalException technicalException0 = new TechnicalException("");
        ApplicationException applicationException0 = new ApplicationException("^|rMoI(0l*Q,?t", stackException0);
        technicalException0.toString();
        technicalException0.initCause(applicationException0);
        PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
        doReturn((PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null,
                (PrintWriter) null).when(printWriter0).append(any(java.lang.CharSequence.class));
        technicalException0.printStackTrace(printWriter0);
        stackException0.getExtendedMessage();
        stackException0.getKeyCode();
        stackException1.retainAll(collection1);
        applicationException0.setExtendedMessage("0>vj:=3X");
        stackException0.getMagicValue();
        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException0.printStackTrace(printStream0);
        applicationException0.getSeverity();
        assertEquals("0>vj:=3X", applicationException0.getExtendedMessage());
    }

    @Test
    public void test3()
            throws Throwable {
        String string0 = " ";
        Severity severity0 = Severity.ERROR;
        Severity.getSeverity(" ");
        String string1 = "\"g=b#R~P)oR*^vkAc(1";
        StackException stackException0 = new StackException(" ", severity0, "\"g=b#R~P)oR*^vkAc(1");
        // Undeclared exception!
        try {
            Severity.getSeverity((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.exception.core.Severity", e);
        }
    }

    @Test
    public void test4()
            throws Throwable {
        Severity severity0 = Severity.WARNING;
        ApplicationException applicationException0 = new ApplicationException("7pgk)w", severity0, "");
        StackException stackException0 = new StackException("", severity0, "");
        int int0 = stackException0.size();
        assertEquals(0, int0);
    }

    @Test
    public void test5()
            throws Throwable {
        Severity severity0 = Severity.FATAL;
        StackException stackException0 = new StackException("0ILSG &0j;iFGrr+Q", severity0, "0ILSG &0j;iFGrr+Q");
        boolean boolean0 = stackException0.isEmpty();
        TechnicalException technicalException0 = new TechnicalException("+8Cm", stackException0, "");
        StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
        StackTraceElement stackTraceElement0 = new StackTraceElement("Error looking for class '",
                "k,,@Vgcv||/9",
                "0ILSG &0j;iFGrr+Q",
                2);
        stackTraceElementArray0[0] = stackTraceElement0;
        StackTraceElement stackTraceElement1 = new StackTraceElement("[f|K3[U",
                "com.araguacaima.commons.exception.core.GeneralException",
                "2NA~",
                (-727));
        stackTraceElementArray0[1] = stackTraceElement1;
        StackTraceElement stackTraceElement2 = new StackTraceElement("1*^'[q@0O$",
                "0ILSG &0j;iFGrr+Q",
                "Error reading file '",
                1);
        stackTraceElementArray0[2] = stackTraceElement2;
        StackTraceElement stackTraceElement3 = new StackTraceElement("2NA~",
                "com.araguacaima.commons.exception.core.GeneralException",
                "U#fP[[9$r3{a- [[exceptions_en_.properties]]",
                3);
        stackTraceElementArray0[3] = stackTraceElement3;
        StackTraceElement stackTraceElement4 = new StackTraceElement("", "1*^'[q@0O$", "", (-727));
        stackTraceElementArray0[4] = stackTraceElement4;
        StackTraceElement stackTraceElement5 = new StackTraceElement("1*^'[q@0O$", "2NA~", "", 5);
        stackTraceElementArray0[5] = stackTraceElement5;
        StackTraceElement stackTraceElement6 = new StackTraceElement("%L>Ipi~XA%Cc", "", "", 5);
        stackTraceElementArray0[6] = stackTraceElement6;
        technicalException0.setStackTrace(stackTraceElementArray0);
        technicalException0.printStackTrace();
        stackException0.setExtendedMessage("Error reading file '");
        technicalException0.printStackTrace();
        boolean boolean1 = stackException0.remove("U#fP[[9$r3{a- [[exceptions_en_.properties]]");
        assertFalse(boolean1 == boolean0);
    }

    @Test
    public void test6()
            throws Throwable {
        Severity severity0 = Severity.DEBUG;
        Severity.getSeverities();
        Severity.getSeverity("!");
        StackException stackException0 = new StackException("!", severity0, (String) null);
        Severity.getSeverity("!");
        Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        stackException0.forEach(consumer0);
        stackException0.iterator();
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) consumer0;
        objectArray0[1] = (Object) null;
        stackException0.toArray(objectArray0);
        StackException stackException1 = new StackException("!", severity0, "");
        stackException1.toString();
        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        doReturn((PrintStream) null,
                (PrintStream) null,
                (PrintStream) null,
                (PrintStream) null,
                (PrintStream) null).when(printStream0).append(any(java.lang.CharSequence.class));
        stackException1.printStackTrace(printStream0);
        stackException0.removeAll(stackException1);
        stackException0.remove((Object) null);
        String string0 = stackException0.getExtendedMessage();
        assertEquals("", string0);
    }

    @Test
    public void test7()
            throws Throwable {
        Severity severity0 = Severity.INFO;
        Severity.getSeverities();
        Severity.getSeverity("");
        Object[] objectArray0 = new Object[8];
        objectArray0[0] = (Object) "rjr1";
        objectArray0[1] = (Object) "rjr1";
        Severity.getSeverity("rjr1");
        objectArray0[2] = (Object) "rjr1";
        objectArray0[3] = (Object) severity0;
        objectArray0[4] = (Object) severity0;
        objectArray0[5] = (Object) severity0;
        Severity.getSeverities();
        objectArray0[6] = (Object) severity0;
        objectArray0[7] = (Object) "rjr1";
        ApplicationException applicationException0 = new ApplicationException("rjr1", severity0, objectArray0);
        Severity severity1 = Severity.WARNING;
        Severity.getSeverity("");
        StackException stackException0 = new StackException("rjr1", severity1);
        stackException0.clear();
        boolean boolean0 = stackException0.add("");
        assertTrue(boolean0);
    }

    @Test
    public void test8()
            throws Throwable {
        ApplicationException applicationException0 = new ApplicationException(" ", (Severity) null);
        Throwable throwable0 = applicationException0.fillInStackTrace();
        applicationException0.setExtendedMessage("");
        applicationException0.getMagicValue();
        Severity.getSeverity("");
        TechnicalException technicalException0 = new TechnicalException(" ",
                (Severity) null,
                applicationException0,
                " ");
        applicationException0.printStackTrace();
        PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
        technicalException0.printStackTrace(printStream0);
        StackException stackException0 = new StackException(" ", (Severity) null, " ");
        stackException0.remove(applicationException0);
        StackException stackException1 = new StackException("&3ED~Q!*^p%", (Severity) null, " ");
        stackException0.retainAll(stackException1);
        Severity.getSeverities();
        Collection collection0 = Severity.getSeverities();
        Collection collection1 = Severity.getSeverities();
        stackException0.size();
        stackException0.clear();
        stackException0.isEmpty();
        stackException0.remove(" ");
        Throwable throwable1 = stackException1.fillInStackTrace();
        Object object0 = new Object();
        stackException0.add(object0);
        technicalException0.getKeyCode();
        String string0 = stackException1.getExtendedMessage();
        assertEquals(" ", string0);

        Iterator iterator0 = stackException0.iterator();
        stackException1.isEmpty();
        stackException0.containsAll(collection0);
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) applicationException0;
        objectArray0[1] = (Object) "&3ED~Q!*^p%";
        objectArray0[2] = (Object) collection1;
        objectArray0[3] = (Object) throwable1;
        objectArray0[4] = (Object) throwable0;
        objectArray0[5] = (Object) iterator0;
        stackException0.toArray(objectArray0);
        assertEquals(" ", stackException0.getExtendedMessage());
    }
}
