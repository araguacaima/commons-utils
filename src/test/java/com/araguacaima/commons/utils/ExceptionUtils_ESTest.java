/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 08 16:22:31 GMT 2017
 */

package com.araguacaima.commons.utils;

import com.araguacaima.commons.exception.core.Exceptions;
import com.araguacaima.commons.exception.core.TechnicalException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Locale;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.runtime.MockitoExtension.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS = true,
                     useVNET = true,
                     resetStaticState = true,
                     separateClassLoader = true,
                     useJEE = true)
public class ExceptionUtils_ESTest extends ExceptionUtils_ESTest_scaffolding {

    @Test
    public void test00()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        Exception exception0 = mock(Exception.class, new ViolatedAssumptionAnswer());
        doReturn((Throwable) null).when(exception0).getCause();
        doReturn((String) null).when(exception0).getMessage();
        TechnicalException technicalException0 = (TechnicalException) exceptionUtils0.cleanException(exception0);
        Locale locale0 = Locale.ITALIAN;
        String string0 = exceptionUtils0.getMessage((Exception) technicalException0, locale0);
        assertEquals("[[exceptions_en_.properties]]", string0);
        assertNotNull(string0);
        assertEquals("UNKNOWN", technicalException0.getKeyCode());
    }

    @Test
    public void test01()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        Locale locale0 = Locale.TAIWAN;
        // Undeclared exception!
        try {
            exceptionUtils0.getMessage((Exception) null, locale0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ExceptionUtils", e);
        }
    }

    @Test
    public void test02()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        // Undeclared exception!
        try {
            exceptionUtils0.getMessage((Exception) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ExceptionUtils", e);
        }
    }

    @Test
    public void test03()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        assertEquals("Error Unknown (null Exception)", exceptionUtils0.cleanMessage((String) null, (0), (10)));
    }

    @Test
    public void test04()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        assertEquals("j~'h{ gIj?XEyfA~", exceptionUtils0.cleanMessage("j~'h{ gIj?XEyfA~"));
    }

    @Test
    public void test05()
            throws Throwable {
        Exception exception0 = mock(Exception.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(exception0).getMessage();
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        assertNull(exceptionUtils0.cleanMessage(exception0, 5175, 0));
    }

    @Test
    public void test06()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        String string0 = exceptionUtils0.cleanMessage((Exception) null, (-933), (-933));
        assertNull(string0);
    }

    @Test
    public void test07()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        Exception exception0 = mock(Exception.class, new ViolatedAssumptionAnswer());
        doReturn((Throwable) null).when(exception0).getCause();
        doReturn((String) null).when(exception0).getMessage();
        TechnicalException technicalException0 = (TechnicalException) exceptionUtils0.cleanException(exception0);
        exceptionUtils0.handleException("xF=v", (Exception) technicalException0);
        assertEquals("UNKNOWN", technicalException0.getKeyCode());
        assertEquals("", technicalException0.getExtendedMessage());
    }

    @Test
    public void test08()
            throws Throwable {
        Exception exception0 = mock(Exception.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(exception0).getMessage();
        Locale locale0 = Locale.FRENCH;
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        String string0 = exceptionUtils0.getMessage(exception0, locale0);
        assertNull(string0);
    }

    @Test
    public void test09()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        Exception exception0 = exceptionUtils0.cleanException((Exception) null);
        assertNull(exceptionUtils0.cleanMessage(exception0, (-14)));
    }

    @Test
    public void test10()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        Exception exception0 = mock(Exception.class, new ViolatedAssumptionAnswer());
        doReturn((Throwable) null).when(exception0).getCause();
        doReturn((String) null).when(exception0).getMessage();
        Exception exception1 = exceptionUtils0.cleanException(exception0);
        assertNull(exceptionUtils0.cleanMessage(exception1, 2494, 2494));

    }

    @Test
    public void test11()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        String string0 = exceptionUtils0.cleanMessage((Exception) null, 993);
        assertNull(string0);
    }

    @Test
    public void test12()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        assertEquals("", exceptionUtils0.cleanMessage((Exception) null));
    }

    @Test
    public void test13()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        Exception exception0 = mock(Exception.class, new ViolatedAssumptionAnswer());
        doReturn((Throwable) null).when(exception0).getCause();
        doReturn((String) null).when(exception0).getMessage();
        Exception exception1 = exceptionUtils0.cleanException(exception0);
        final String message = Exceptions.getMessage(Exceptions.UNKNOWN_ERROR);
        assertEquals(message, exceptionUtils0.cleanMessage(exception1));
    }

    @Test
    public void test14()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        Exception exception0 = mock(Exception.class, new ViolatedAssumptionAnswer());
        doReturn((Throwable) null).when(exception0).getCause();
        doReturn((String) null).when(exception0).getMessage();
        TechnicalException technicalException0 = (TechnicalException) exceptionUtils0.cleanException(exception0);
        Exception exception1 = mock(Exception.class, new ViolatedAssumptionAnswer());
        doReturn(technicalException0, (Throwable) null).when(exception1).getCause();
        TechnicalException technicalException1 = (TechnicalException) exceptionUtils0.cleanException(exception1);
        assertEquals("UNKNOWN", technicalException1.getKeyCode());
        assertEquals("UNKNOWN", technicalException0.getKeyCode());
        assertEquals("[[exceptions_en_.properties]]", technicalException1.getExtendedMessage());
    }

    @Test
    public void test15()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        assertEquals("Error Unknown (null Exception)", exceptionUtils0.cleanMessage("", 0));

    }

    @Test
    public void test16()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        exceptionUtils0.handleException((Exception) null);
    }

    @Test
    public void test17()
            throws Throwable {
        ExceptionUtils exceptionUtils0 = new ExceptionUtils();
        Exception exception0 = mock(Exception.class, new ViolatedAssumptionAnswer());
        doReturn((Throwable) null).when(exception0).getCause();
        doReturn((String) null).when(exception0).getMessage();
        TechnicalException technicalException0 = (TechnicalException) exceptionUtils0.cleanException(exception0);
        String string0 = exceptionUtils0.getMessage((Exception) technicalException0);
        assertEquals("[[exceptions_en_.properties]]", string0);
        assertNotNull(string0);
        assertEquals("UNKNOWN", technicalException0.getKeyCode());
    }
}
