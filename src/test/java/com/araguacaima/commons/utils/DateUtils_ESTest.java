/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 08 16:18:40 GMT 2017
 */

package com.araguacaima.commons.utils;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Date;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS = true,
                     useVNET = true,
                     resetStaticState = true,
                     separateClassLoader = true,
                     useJEE = true)
public class DateUtils_ESTest extends DateUtils_ESTest_scaffolding {

    @Test
    public void test00()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);

        String string0 = dateUtils0.completeDateLast("fjj=Wl}@e\"");
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals("fjj=Wl}@e\" 23:59:59", string0);
        assertNotNull(string0);
    }

    @Test
    public void test01()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);

        dateUtils0.init();
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
    }

    @Test
    public void test02()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);

        boolean boolean0 = dateUtils0.validateFormat("Error adding data from file '", "!");
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertFalse(boolean0);
    }

    @Test
    public void test03()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);

        String string0 = dateUtils0.completeDateLast((String) null);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertNull(string0);
    }

    @Test
    public void test04()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);

        String string0 = dateUtils0.completeDateLast("");
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals("", string0);
        assertNotNull(string0);
    }

    @Test
    public void test05()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);

        String string0 = dateUtils0.completeDateFirst(">aO5&h&9d:k}bt");
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(">aO5&h&9d:k}bt", string0);
        assertNotNull(string0);
    }

    @Test
    public void test06()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);

        String string0 = dateUtils0.completeDateFirst("");
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals("", string0);
        assertNotNull(string0);
    }

    @Test
    public void test07()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);

        dateUtils0.sdf = null;
        // Undeclared exception!
        try {
            dateUtils0.getDateByString("PDuJ", false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.DateUtils", e);
        }
    }

    @Test
    public void test08()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);

        dateUtils0.sdf = null;
        // Undeclared exception!
        try {
            dateUtils0.getDateByString((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.DateUtils", e);
        }
    }

    @Test
    public void test09()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);

        // Undeclared exception!
        try {
            dateUtils0.format((Date) null, " 23:59:59");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Calendar", e);
        }
    }

    @Test
    public void test10()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);

        String string0 = dateUtils0.completeDate("", "1T");
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals("", string0);
        assertNotNull(string0);
    }

    @Test
    public void test11()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);

        String string0 = dateUtils0.completeDate((String) null, (String) null);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertNull(string0);
    }

    @Test
    public void test12()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);

        boolean boolean0 = dateUtils0.validateFormat("20:21:21", "20:21:21");
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertTrue(boolean0);
    }

    @Test
    public void test13()
            throws Throwable {
        System.setCurrentTimeMillis(1L);
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);

        String string0 = dateUtils0.todayFullString();
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals("Lunes 01 de Enero de 1970", string0);
        assertNotNull(string0);
    }

    @Test
    public void test14()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);

        // Undeclared exception!
        try {
            dateUtils0.todayFullString();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 14
            //
            verifyException("com.araguacaima.commons.utils.DateUtils", e);
        }
    }

    @Test
    public void test15()
            throws Throwable {
        System.setCurrentTimeMillis(1L);
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);

        String string0 = dateUtils0.now();
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals("0:00:00", string0);
        assertNotNull(string0);
    }

    @Test
    public void test16()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);

        String string0 = dateUtils0.now();
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertEquals("20:21:21", string0);
        assertNotNull(string0);
    }

    @Test
    public void test17()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertNotNull(dateUtils0);

        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);

        boolean boolean0 = dateUtils0.isEmpty("DD-MM-AAAA HH:MM:SS");
        assertEquals(86400000L, DateUtils.MILLISECONDS_IN_DAY);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
        assertEquals(19, DateUtils.LONG_DATE_LENGTH);
        assertTrue(boolean0);
    }

    @Test
    public void test18()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        assertTrue(dateUtils0.isEmpty(null));
    }

    @Test
    public void test19()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        boolean boolean0 = dateUtils0.isEmpty("DD-MM-AAAA");
        assertTrue(boolean0);
    }

    @Test
    public void test20()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        java.sql.Date date0 = dateUtils0.getSqlDate((Date) null);
        assertNull(date0);
    }

    @Test
    public void test21()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        Date date0 = dateUtils0.getDateWithZeroHour((Date) null);
        assertNull(date0);
    }

    @Test
    public void test22()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        Date date0 = dateUtils0.getDateByString(" 23:59:59", true);
        assertNull(date0);
    }

    @Test
    public void test23()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        Date date0 = dateUtils0.getDateByString("PDuJ", false);
        assertNull(date0);
    }

    @Test
    public void test24()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        String string0 = dateUtils0.formatDateTime((Date) null);
        assertNull(string0);
    }

    @Test
    public void test25()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        String string0 = dateUtils0.formatDate((Date) null);
        assertNull(string0);
    }

    @Test
    public void test26()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        DateUtils dateUtils1 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils1, (Class<?>) DateUtils.class);
        dateUtils1.sdf = dateUtils0.sdft;
        Date date0 = dateUtils1.getDateByString(" 00:00:00");
        String string0 = dateUtils0.formatDate(date0);
        assertNotNull(string0);
        assertEquals("14-02-2014", string0);
    }

    @Test
    public void test27()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        String string0 = dateUtils0.completeDate("yyyy-MM-dd", "yyyy-MM-dd");
        assertEquals("yyyy-MM-ddyyyy-MM-dd", string0);
    }

    @Test
    public void test28()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        String[] stringArray0 = new String[1];
        dateUtils0.main(stringArray0);
        assertEquals(10, DateUtils.SHORT_DATE_LENGTH);
    }

    @Test
    public void test29()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        String string0 = dateUtils0.completeDateFirst((String) null);
        assertNull(string0);
    }

    @Test
    public void test30()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        Date date0 = dateUtils0.getDateByString(" 00:00:00");
        assertNull(date0);
    }

    @Test
    public void test31()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        String string0 = dateUtils0.today();
        assertEquals("14/02/2014", string0);
    }

    @Test
    public void test32()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        // Undeclared exception!
        try {
            dateUtils0.daysBetween((Date) null, (Date) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.DateUtils", e);
        }
    }

    @Test
    public void test33()
            throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Injector.executePostConstruct((Object) dateUtils0, (Class<?>) DateUtils.class);
        // Undeclared exception!
        try {
            dateUtils0.format((Date) null, "DD-MM-AAAA HH:MM:SS");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern character 'A'
            //
            verifyException("java.text.SimpleDateFormat", e);
        }
    }
}
