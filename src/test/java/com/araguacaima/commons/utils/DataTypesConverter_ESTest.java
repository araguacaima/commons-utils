/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 08 16:24:44 GMT 2017
 */

package com.araguacaima.commons.utils;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS = true,
                     useVNET = true,
                     resetStaticState = true,
                     separateClassLoader = true,
                     useJEE = true)
public class DataTypesConverter_ESTest extends DataTypesConverter_ESTest_scaffolding {

    @Test
    public void test00()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        // Undeclared exception!
        try {
            dataTypesConverter0.getDataTypeView("Map<Map<w*wP+:@*qH0`)\"");
            fail("Expecting exception: StringIndexOutOfBoundsException");

        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test01()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        // Undeclared exception!
        try {
            dataTypesConverter0.getDataTypeView("Map<");
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 1
            //
            verifyException("com.araguacaima.commons.utils.DataTypesConverter", e);
        }
    }

    @Test
    public void test02()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView(
                "?*wI+:@*qH0`)\"");
        assertEquals("complex", dataTypesConverter_DataTypeView0.getDataType());

        dataTypesConverter_DataTypeView0.setDataType("map");
        String string0 = dataTypesConverter_DataTypeView0.extractDataTypeFromListOrMap();
        assertEquals("?*wI+:@*qH0`)\"", string0);
    }

    @Test
    public void test03()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.new DataTypeView("?*wI+",
                "AdNr",
                "Z&[lBp(QibQ2ir(6(F",
                false);
        String string0 = dataTypesConverter_DataTypeView0.extractDataTypeFromListOrMap();
        assertEquals("Z&[lBp(QibQ2ir(6(F", dataTypesConverter_DataTypeView0.getTransformedDataType());
        assertFalse(dataTypesConverter_DataTypeView0.isComplexDataType());
        assertEquals("?*wI+", dataTypesConverter_DataTypeView0.getDataType());
        assertEquals("AdNr", dataTypesConverter_DataTypeView0.getFormat());
        assertNull(string0);
    }

    @Test
    public void test04()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView
                ("period");
        assertEquals("Period", dataTypesConverter_DataTypeView0.getTransformedDataType());
        assertEquals("period", dataTypesConverter_DataTypeView0.getDataType());
        assertFalse(dataTypesConverter_DataTypeView0.isComplexDataType());
    }

    @Test
    public void test05()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView(
                "Time-Only");
        assertEquals("datetime", dataTypesConverter_DataTypeView0.getDataType());
        assertEquals("DateTime", dataTypesConverter_DataTypeView0.getTransformedDataType());
        assertFalse(dataTypesConverter_DataTypeView0.isComplexDataType());
    }

    @Test
    public void test06()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView(
                "date-only");
        assertEquals("DateTime", dataTypesConverter_DataTypeView0.getTransformedDataType());
        assertFalse(dataTypesConverter_DataTypeView0.isComplexDataType());
        assertEquals("datetime", dataTypesConverter_DataTypeView0.getDataType());
    }

    @Test
    public void test07()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView(
                "datetime");
        assertEquals("DateTime", dataTypesConverter_DataTypeView0.getTransformedDataType());
        assertFalse(dataTypesConverter_DataTypeView0.isComplexDataType());
        assertEquals("datetime", dataTypesConverter_DataTypeView0.getDataType());
    }

    @Test
    public void test08()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView(
                "List<?*wI+@*H0`):");
        boolean boolean0 = dataTypesConverter_DataTypeView0.isListOrMap();
        assertEquals("?*wI+@*H0`)", dataTypesConverter_DataTypeView0.getTransformedDataType());
        assertTrue(boolean0);
        assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
    }

    @Test
    public void test09()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView(
                (String) null);
        assertNull(dataTypesConverter_DataTypeView0);
    }

    @Test
    public void test10()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView("date");
        dataTypesConverter_DataTypeView0.setFormat("?*wi+:@*qh0`)\"");
        assertEquals("date", dataTypesConverter_DataTypeView0.getDataType());
        assertFalse(dataTypesConverter_DataTypeView0.isComplexDataType());
        assertEquals("Date", dataTypesConverter_DataTypeView0.getTransformedDataType());
    }

    @Test
    public void test11()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView(
                "?*wI+:@*qH0`)\"");
        String string0 = dataTypesConverter_DataTypeView0.getTransformedDataType();
        assertNotNull(string0);
        assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
        assertEquals("?*wI+:@*qH0`)\"", string0);
        assertEquals("complex", dataTypesConverter_DataTypeView0.getDataType());
    }

    @Test
    public void test12()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView(
                "?*wI+:@*qH0`)\"");
        dataTypesConverter_DataTypeView0.setComplexDataType(true);
        assertEquals("complex", dataTypesConverter_DataTypeView0.getDataType());
        assertEquals("?*wI+:@*qH0`)\"", dataTypesConverter_DataTypeView0.getTransformedDataType());
        assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
    }

    @Test
    public void test13()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView(
                "?*wI+:@*qH0`)\"");
        boolean boolean0 = dataTypesConverter_DataTypeView0.isComplexDataType();
        assertTrue(boolean0);
        assertEquals("complex", dataTypesConverter_DataTypeView0.getDataType());
        assertEquals("?*wI+:@*qH0`)\"", dataTypesConverter_DataTypeView0.getTransformedDataType());
    }

    @Test
    public void test14()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView(
                "?*wI+:@*qH0`)\"");
        String string0 = dataTypesConverter_DataTypeView0.getFormat();
        assertEquals("?*wI+:@*qH0`)\"", dataTypesConverter_DataTypeView0.getTransformedDataType());
        assertEquals("complex", dataTypesConverter_DataTypeView0.getDataType());
        assertTrue(dataTypesConverter_DataTypeView0.isComplexDataType());
        assertNull(string0);
    }

    @Test
    public void test15()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView(
                "Map<w*wP+:@*qH0`)\"");
        assertEquals("w*wP+:@*qH0`)", dataTypesConverter_DataTypeView0.getTransformedDataType());

        dataTypesConverter_DataTypeView0.setTransformedDataType("?*wI+:@*qH0`)\"");
        assertEquals("map", dataTypesConverter_DataTypeView0.getDataType());
    }

    @Test
    public void test16()
            throws Throwable {
        DataTypesConverter dataTypesConverter0 = new DataTypesConverter();
        DataTypesConverter.DataTypeView dataTypesConverter_DataTypeView0 = dataTypesConverter0.getDataTypeView(
                "date-time");
        assertNotNull(dataTypesConverter_DataTypeView0);

        String string0 = dataTypesConverter_DataTypeView0.getDataType();
        assertFalse(dataTypesConverter_DataTypeView0.isComplexDataType());
        assertNotNull(string0);
        assertEquals("DateTime", dataTypesConverter_DataTypeView0.getTransformedDataType());
        assertEquals("datetime", string0);
    }

}
