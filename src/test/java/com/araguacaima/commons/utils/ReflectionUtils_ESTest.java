/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 08 16:20:24 GMT 2017
 */

package com.araguacaima.commons.utils;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.Serializable;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.*;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS = true,
                     useVNET = true,
                     resetStaticState = true,
                     separateClassLoader = true,
                     useJEE = true)
public class ReflectionUtils_ESTest extends ReflectionUtils_ESTest_scaffolding {

    @Test
    public void test00()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        reflectionUtils0.mergeObjects("YXAjS5", "Could not initialize ", true, false);
    }

    @Test
    public void test01()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
        reflectionUtils0.addEnum(class0, "':Y%B)'m%*pR+h@EkJ+", "java.util", "`WK_|!PLA&");
    }

    @Test
    public void test02()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        boolean boolean0 = reflectionUtils0.isList((String) null);
        assertFalse(boolean0);
    }

    @Test
    public void test03()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        boolean boolean0 = reflectionUtils0.isCollectionImplementation("java.lang.Class");
        assertFalse(boolean0);
    }

    @Test
    public void test04()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        String string0 = reflectionUtils0.getExtractedGenerics("java.util.List<C2Wollection<");
        assertEquals("C2Wollection<", string0);
    }

    @Test
    public void test05()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        String string0 = reflectionUtils0.getExtractedGenerics("");
        assertEquals("", string0);
    }

    @Test
    public void test06()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<String> class0 = String.class;
        Collection<Field> collection0 = reflectionUtils0.getAllFieldsIncludingParents((Object) class0);
        assertNotNull(collection0);
    }

    @Test
    public void test07()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Annotation> class0 = Annotation.class;
        Class class1 = reflectionUtils0.extractTypedGenericsParameter(class0);
        assertEquals("interface java.lang.annotation.Annotation", class1.toString());
    }

    @Test
    public void test08()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
        Class class1 = reflectionUtils0.extractTypedGenericsParameter(class0);
        assertFalse(class1.isAnnotation());
    }

    @Test
    public void test09()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
        Class class1 = reflectionUtils0.extractGenerics(class0);
        assertFalse(class1.isInterface());
    }

    @Test
    public void test10()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
        Class class1 = (Class) reflectionUtils0.deepClone(class0);
        assertTrue(class1.isEnum());
    }

    @Test
    public void test11()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<String> class0 = String.class;
        Collection<Object> collection0 = reflectionUtils0.createAndInitializeTypedCollection(class0);
        assertNotNull(collection0);
    }

    @Test
    public void test12()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.mergeObjects((Object) null, (Object) null, false, false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test13()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        HttpUtils.METHOD_TYPE httpUtils_METHOD_TYPE0 = HttpUtils.METHOD_TYPE.TRACE;
        try {
            reflectionUtils0.mergeObjects(httpUtils_METHOD_TYPE0, httpUtils_METHOD_TYPE0, true, true);
            fail("Expecting exception: InstantiationException");

        } catch (InstantiationException e) {
            //
            // com.araguacaima.commons.utils.HttpUtils$METHOD_TYPE
            //
            verifyException("java.lang.Class", e);
        }
    }

    @Test
    public void test14()
            throws Throwable {
        Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Integer integer0 = new Integer((-2267));
        try {
            reflectionUtils0.mergeObjects((Object) integer0, (Object) class0, true, true);
            fail("Expecting exception: IllegalAccessException");

        } catch (IllegalAccessException e) {
            //
            // Can not call newInstance() on the Class for java.lang.Class
            //
            verifyException("java.lang.Class", e);
        }
    }

    @Test
    public void test15()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.mergeObjects((Object) null, (Object) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test16()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Integer integer0 = new Integer(0);
        try {
            reflectionUtils0.mergeObjects(integer0, integer0);
            fail("Expecting exception: InstantiationException");

        } catch (InstantiationException e) {
            //
            // java.lang.Integer
            //
            verifyException("java.lang.Class", e);
        }
    }

    @Test
    public void test17()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.getSimpleJavaTypeOrNull("<mGRl9w*N1yM@Z*o", false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test18()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        assertNull(reflectionUtils0.getSimpleJavaTypeOrNull((String) null, false));
    }

    @Test
    public void test19()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.getSimpleJavaTypeOrNull("T&L=s8=WTOfjci<c");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test20()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Object> class0 = Object.class;
        // Undeclared exception!
        try {
            reflectionUtils0.getFieldInclusiveOnParents(class0, (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Either name or type of the field must be specified
            //
            verifyException("org.springframework.util.Assert", e);
        }
    }

    @Test
    public void test21()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.getExtractedGenerics((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test22()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.getAllFieldsIncludingParents((Class) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Class must not be null
            //
            verifyException("org.springframework.util.Assert", e);
        }
    }

    @Test
    public void test23()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.extractGenericsKeyValue((Field) null, true);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test24()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        HashSet<String> hashSet0 = new HashSet<String>();
        // Undeclared exception!
        try {
            reflectionUtils0.deepInitialization((Object) "java.lang.Class", (Set<String>) hashSet0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test25()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Integer integer0 = new Integer(0);
        // Undeclared exception!
        try {
            reflectionUtils0.deepInitialization((Object) integer0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test26()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
        try {
            reflectionUtils0.createObject(class0);
            fail("Expecting exception: InvocationTargetException");

        } catch (InvocationTargetException e) {
            //
            // Unable to find a no-arg constructor for class: com.araguacaima.commons.utils.HttpUtils$METHOD_TYPE
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test27()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
        try {
            reflectionUtils0.createCollectionObject(class0);
            fail("Expecting exception: InstantiationException");

        } catch (InstantiationException e) {
            //
            // com.araguacaima.commons.utils.HttpUtils$METHOD_TYPE
            //
            verifyException("java.lang.Class", e);
        }
    }

    @Test
    public void test28()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Object> class0 = Object.class;
        Integer integer0 = new Integer(0);
        // Undeclared exception!
        try {
            reflectionUtils0.createAndInitializeTypedCollection((Class<?>) class0, ";tp", (Object) integer0);
            fail("Expecting exception: NoSuchMethodException");

        } catch (NoSuchMethodException e) {
            verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
        }
    }

    @Test
    public void test29()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Integer> class0 = Integer.class;
        try {
            reflectionUtils0.createAndInitializeTypedCollection(class0, "java.net", (Object) null);
            fail("Expecting exception: InstantiationException");

        } catch (InstantiationException e) {
            //
            // java.lang.Integer
            //
            verifyException("java.lang.Class", e);
        }
    }

    @Test
    public void test30()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<ReflectionUtils> class0 = ReflectionUtils.class;
        try {
            reflectionUtils0.createAndInitializeTypedCollection(class0);
            fail("Expecting exception: InstantiationException");

        } catch (InstantiationException e) {
            //
            // com.araguacaima.commons.utils.ReflectionUtils
            //
            verifyException("java.lang.Class", e);
        }
    }

    @Test
    public void test31()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Object> class0 = Object.class;
        Object object0 = new Object();
        // Undeclared exception!
        try {
            reflectionUtils0.createAndInitializeCollection(class0, "Collection<", object0);
            fail("Expecting exception: NoSuchMethodException");

        } catch (NoSuchMethodException e) {
            verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
        }
    }

    @Test
    public void test32()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.changeAnnotationValue((Annotation) null, "", (Object) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.lang.reflect.Proxy", e);
        }
    }

    @Test
    public void test33()
            throws Throwable {
        Class<Integer> class0 = Integer.class;
        Serializable serializable0 = ReflectionUtils.PrimitiveDefaults.getDefaultValue(class0);
        assertEquals(0, serializable0);
    }

    @Test
    public void test34()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Object> class0 = Object.class;
        boolean boolean0 = reflectionUtils0.isMapImplementation(class0);
        assertFalse(boolean0);
    }

    @Test
    public void test35()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        String string0 = reflectionUtils0.mergeObjects("AND", "List<", false, false);
        assertEquals("", string0);
    }

    @Test
    public void test36()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.getFullyQualifiedJavaTypeOrNull("java.net", true);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test37()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        String string0 = reflectionUtils0.getFullyQualifiedJavaTypeOrNull((String) null, false);
        assertNull(string0);
    }

    @Test
    public void test38()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        reflectionUtils0.deepInitialization((Object) class0, (Set<String>) linkedHashSet0, true, false);
        assertEquals(0, linkedHashSet0.size());
    }

    @Test
    public void test39()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Object> class0 = Object.class;
        Object object0 = reflectionUtils0.createObject(class0, false);
        assertNotNull(object0);
    }

    @Test
    public void test40()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<ReflectionUtils> class0 = ReflectionUtils.class;
        try {
            reflectionUtils0.createAndInitializeTypedCollection((Class<?>) class0, (Object) null);
            fail("Expecting exception: InstantiationException");

        } catch (InstantiationException e) {
            //
            // com.araguacaima.commons.utils.ReflectionUtils
            //
            verifyException("java.lang.Class", e);
        }
    }

    @Test
    public void test41()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Object> class0 = Object.class;
        boolean boolean0 = reflectionUtils0.isCollectionImplementation(class0);
        assertFalse(boolean0);
    }

    @Test
    public void test42()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Annotation> class0 = Annotation.class;
        Class class1 = reflectionUtils0.extractGenerics(class0);
        assertFalse(class1.isPrimitive());
    }

    @Test
    public void test43()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.getAllFieldsIncludingParents((Object) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test44()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Integer> class0 = Integer.class;
        Collection<Field> collection0 = reflectionUtils0.getAllFieldsIncludingParents(class0);
        assertNotNull(collection0);
    }

    @Test
    public void test45()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
        // Undeclared exception!
        try {
            reflectionUtils0.getSimpleJavaTypeOrNull(class0, false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test46()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<ReflectionUtils> class0 = ReflectionUtils.class;
        // Undeclared exception!
        try {
            reflectionUtils0.getFullyQualifiedJavaTypeOrNull(class0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test47()
            throws Throwable {
        Class<Annotation> class0 = Annotation.class;
        // Undeclared exception!
        try {
            ReflectionUtils.PrimitiveDefaults.getDefaultValue(class0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Class type interface java.lang.annotation.Annotation not supported
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils$PrimitiveDefaults", e);
        }
    }

    @Test
    public void test48()
            throws Throwable {
        Class<String> class0 = String.class;
        Serializable serializable0 = ReflectionUtils.PrimitiveDefaults.getDefaultValue(class0);
        assertEquals("", serializable0);
    }

    @Test
    public void test49()
            throws Throwable {
        Class<Object> class0 = Object.class;
        Serializable serializable0 = ReflectionUtils.PrimitiveDefaults.getDefaultValue(class0);
        assertNull(serializable0);
    }

    @Test
    public void test50()
            throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        Serializable serializable0 = ReflectionUtils.PrimitiveDefaults.getDefaultValue(class0);
        assertEquals(0, serializable0);
    }

    @Test
    public void test51()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
        // Undeclared exception!
        try {
            reflectionUtils0.recursivelyGetAllSuperClasses(class0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test52()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        LinkedList<Class> linkedList0 = (LinkedList<Class>) reflectionUtils0.recursivelyGetAllSuperClasses((Class)
                null);
        assertEquals(0, linkedList0.size());
    }

    @Test
    public void test53()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
        Collection<Field> collection0 = reflectionUtils0.getAllFieldsIncludingParents(class0,
                (Integer) null,
                (Integer) null);
        assertNotNull(collection0);
    }

    @Test
    public void test54()
            throws Throwable {
        Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Integer integer0 = new Integer(0);
        Collection<Field> collection0 = reflectionUtils0.getAllFieldsIncludingParents(class0, integer0, integer0);
        assertNotNull(collection0);
    }

    @Test
    public void test55()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        boolean boolean0 = reflectionUtils0.isMapImplementation((Class) null);
        assertFalse(boolean0);
    }

    @Test
    public void test56()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        String string0 = reflectionUtils0.mergeObjects("YXAjS5", "YXAjS5", true, true);
        assertEquals("YXAjS5", string0);
    }

    @Test
    public void test57()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        boolean boolean0 = reflectionUtils0.isList("Could not initialize ");
        assertFalse(boolean0);
    }

    @Test
    public void test58()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        boolean boolean0 = reflectionUtils0.isList("Collection<");
        assertTrue(boolean0);
    }

    @Test
    public void test59()
            throws Throwable {
        Class<Integer> class0 = Integer.class;
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.getValueFromCollectionImplementation(class0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid Type. Incoming type must be a collection implementation
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test60()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Object object0 = reflectionUtils0.getValueFromCollectionImplementation((Object) null);
        assertNull(object0);
    }

    @Test
    public void test61()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        HashSet<HttpUtils.METHOD_TYPE> hashSet0 = new HashSet<HttpUtils.METHOD_TYPE>();
        // Undeclared exception!
        try {
            reflectionUtils0.getValueFromCollectionImplementation(hashSet0);
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 0, Size: 0
            //
            verifyException("java.util.ArrayList", e);
        }
    }

    @Test
    public void test62()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.extractGenerics((Field) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test63()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("");
        // Undeclared exception!
        try {
            reflectionUtils0.deepInitialization((Object) "int", (Set<String>) linkedHashSet0, false, false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test64()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.deepInitialization((Object) "BrK5nJq@ K.;.r", (Set<String>) null, false, false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test65()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        HashSet<String> hashSet0 = new HashSet<String>();
        // Undeclared exception!
        try {
            reflectionUtils0.deepInitialization((Object) "", (Set<String>) hashSet0, true, true);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test66()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Integer> class0 = Integer.class;
        try {
            reflectionUtils0.createObject(class0, false);
            fail("Expecting exception: InvocationTargetException");

        } catch (InvocationTargetException e) {
            //
            // Unable to find a no-arg constructor for class: java.lang.Integer
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test67()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Field> class0 = Field.class;
        try {
            reflectionUtils0.createObject(class0, true);
            fail("Expecting exception: InvocationTargetException");

        } catch (InvocationTargetException e) {
            //
            // Unable to find a no-arg constructor for class: java.lang.reflect.Field
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test68()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Object> class0 = Object.class;
        // Undeclared exception!
        try {
            reflectionUtils0.createCollectionObject(class0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid Type. Incoming type must be a collection implementation
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test69()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<String> class0 = String.class;
        LinkedHashMap<ReflectionUtils, Integer> linkedHashMap0 = new LinkedHashMap<ReflectionUtils, Integer>();
        Collection<Object> collection0 = reflectionUtils0.createAndInitializeTypedCollection((Class<?>) class0,
                (Object) linkedHashMap0);
        assertNotNull(collection0);
    }

    @Test
    public void test70()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        String string0 = reflectionUtils0.mergeObjects("&", "Qq_");
        assertEquals("", string0);
    }

    @Test
    public void test71()
            throws Throwable {
        ReflectionUtils.PrimitiveDefaults reflectionUtils_PrimitiveDefaults0 = new ReflectionUtils.PrimitiveDefaults();
    }

    @Test
    public void test72()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        assertNull(reflectionUtils0.getSimpleJavaTypeOrNull((String) null));
    }

    @Test
    public void test73()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Object> class0 = Object.class;
        Object object0 = reflectionUtils0.createObject(class0);
        assertNotNull(object0);
    }

    @Test
    public void test74()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Field> class0 = Field.class;
        reflectionUtils0.deepInitialization((Object) class0);
    }

    @Test
    public void test75()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<ReflectionUtils> class0 = ReflectionUtils.class;
        try {
            reflectionUtils0.createAndInitializeCollection((Class<?>) class0, "integer", (Object) "integer");
            fail("Expecting exception: InstantiationException");

        } catch (InstantiationException e) {
            //
            // com.araguacaima.commons.utils.ReflectionUtils
            //
            verifyException("java.lang.Class", e);
        }
    }

    @Test
    public void test76()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<String> class0 = String.class;
        Field field0 = reflectionUtils0.getFieldInclusiveOnParents(class0, "");
        assertNull(field0);
    }

    @Test
    public void test77()
            throws Throwable {
        Object object0 = new Object();
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Object object1 = reflectionUtils0.deepClone(object0);
        assertNull(object1);
    }

    @Test
    public void test78()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.createAndInitializeTypedCollection((Class<?>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test79()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.getFullyQualifiedJavaTypeOrNull((Object) "annottinData");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test80()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Integer> class0 = Integer.class;
        // Undeclared exception!
        try {
            reflectionUtils0.getSimpleJavaTypeOrNull(class0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test81()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.createAndInitializeTypedCollection((Class<?>) null,
                    "enumConstantDirectory",
                    (Object) reflectionUtils0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test82()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        boolean boolean0 = reflectionUtils0.isCollectionImplementation("Collection<Could not initialize ");
        assertFalse(boolean0);
    }

    @Test
    public void test83()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        // Undeclared exception!
        try {
            reflectionUtils0.deepInitialization((Object) null, false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test84()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        Class<Integer> class0 = Integer.class;
        // Undeclared exception!
        try {
            reflectionUtils0.createAndInitializeCollection((Class<?>) class0, (Object) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid Type. Incoming type must be a collection implementation
            //
            verifyException("com.araguacaima.commons.utils.ReflectionUtils", e);
        }
    }

    @Test
    public void test85()
            throws Throwable {
        Class<HttpUtils.METHOD_TYPE> class0 = HttpUtils.METHOD_TYPE.class;
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        HashSet<String> hashSet0 = new HashSet<String>(reflectionUtils0.COMMONS_TYPES_PREFIXES);
        reflectionUtils0.deepInitialization((Object) class0, (Set<String>) hashSet0);
        assertEquals(8, hashSet0.size());
    }

    @Test
    public void test86()
            throws Throwable {
        ReflectionUtils reflectionUtils0 = new ReflectionUtils((DataTypesConverter) null);
        String string0 = reflectionUtils0.getExtractedGenerics("Collection<Error getting constructor for class: ");
        assertEquals("Collection<Error getting constructor for class:", string0);
    }
}
